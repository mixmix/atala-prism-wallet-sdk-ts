import { default as PlutoInterface } from "../domain/buildingBlocks/Pluto";
import { DID, PrivateKey } from "../domain/models";
import { DIDPair } from "../domain/models/DIDPair";
import { Mediator } from "../domain/models/Mediator";
import { Message } from "../domain/models/Message";
import { PeerDID } from "../domain/models/PeerDID";
import { PrismDIDInfo } from "../domain/models/PrismDIDInfo";
import { VerifiableCredential } from "../domain/models/VerifiableCredential";
export default class Pluto implements PlutoInterface {
    start(): Promise<void>;
    storePrismDID(did: DID, keyPathIndex: number, alias?: string | undefined): void;
    storePeerDID(did: DID, privateKeys: PrivateKey[]): void;
    storeDIDPair(host: DID, receiver: DID, name: string): void;
    storeMessage(message: Message): void;
    storeMessages(messages: Message[]): void;
    storePrivateKeys(privateKey: PrivateKey, did: DID, keyPathIndex: number, metaId: string | null): void;
    storeMediator(mediator: DID, host: DID, routing: DID): void;
    storeCredential(credential: VerifiableCredential): void;
    getAllPrismDIDs(): PrismDIDInfo[];
    getDIDInfoByDID(did: DID): PrismDIDInfo | null;
    getDIDInfoByAlias(alias: string): PrismDIDInfo[];
    getPrismDIDKeyPathIndex(did: DID): number | null;
    getPrismLastKeyPathIndex(): number;
    getAllPeerDIDs(): PeerDID[];
    getDIDPrivateKeysByDID(did: DID): PrivateKey[] | null;
    getDIDPrivateKeyByID(id: string): PrivateKey | null;
    getAllDidPairs(): DIDPair[];
    getPairByDID(did: DID): DIDPair | null;
    getPairByName(name: string): DIDPair | null;
    getAllMessages(): Message[];
    getAllMessagesByDID(did: DID): Message[];
    getAllMessagesSent(): Message[];
    getAllMessagesReceived(): Message[];
    getAllMessagesSentTo(did: DID): Message[];
    getAllMessagesReceivedFrom(did: DID): Message[];
    getAllMessagesOfType(type: string, relatedWithDID?: DID | undefined): Message[];
    getAllMessagesByFromToDID(from: DID, to: DID): Message[];
    getMessage(id: string): Message | null;
    getAllMediators(): Mediator[];
    getAllCredentials(): VerifiableCredential[];
}
