"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.io = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: node_models.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = __importStar(require("./common_models"));
const dependency_2 = __importStar(require("./google/protobuf/timestamp"));
const pb_1 = __importStar(require("google-protobuf"));
var io;
(function (io) {
    var iohk;
    (function (iohk) {
        var atala;
        (function (atala) {
            var prism;
            (function (prism) {
                var protos;
                (function (protos) {
                    let KeyUsage;
                    (function (KeyUsage) {
                        KeyUsage[KeyUsage["UNKNOWN_KEY"] = 0] = "UNKNOWN_KEY";
                        KeyUsage[KeyUsage["MASTER_KEY"] = 1] = "MASTER_KEY";
                        KeyUsage[KeyUsage["ISSUING_KEY"] = 2] = "ISSUING_KEY";
                        KeyUsage[KeyUsage["KEY_AGREEMENT_KEY"] = 3] = "KEY_AGREEMENT_KEY";
                        KeyUsage[KeyUsage["AUTHENTICATION_KEY"] = 4] = "AUTHENTICATION_KEY";
                        KeyUsage[KeyUsage["REVOCATION_KEY"] = 5] = "REVOCATION_KEY";
                        KeyUsage[KeyUsage["CAPABILITY_INVOCATION_KEY"] = 6] = "CAPABILITY_INVOCATION_KEY";
                        KeyUsage[KeyUsage["CAPABILITY_DELEGATION_KEY"] = 7] = "CAPABILITY_DELEGATION_KEY";
                    })(KeyUsage = protos.KeyUsage || (protos.KeyUsage = {}));
                    class TimestampInfo extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("block_sequence_number" in data && data.block_sequence_number != undefined) {
                                    this.block_sequence_number = data.block_sequence_number;
                                }
                                if ("operation_sequence_number" in data && data.operation_sequence_number != undefined) {
                                    this.operation_sequence_number = data.operation_sequence_number;
                                }
                                if ("block_timestamp" in data && data.block_timestamp != undefined) {
                                    this.block_timestamp = data.block_timestamp;
                                }
                            }
                        }
                        get block_sequence_number() {
                            return pb_1.Message.getFieldWithDefault(this, 2, 0);
                        }
                        set block_sequence_number(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get operation_sequence_number() {
                            return pb_1.Message.getFieldWithDefault(this, 3, 0);
                        }
                        set operation_sequence_number(value) {
                            pb_1.Message.setField(this, 3, value);
                        }
                        get block_timestamp() {
                            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4);
                        }
                        set block_timestamp(value) {
                            pb_1.Message.setWrapperField(this, 4, value);
                        }
                        get has_block_timestamp() {
                            return pb_1.Message.getField(this, 4) != null;
                        }
                        static fromObject(data) {
                            const message = new TimestampInfo({});
                            if (data.block_sequence_number != null) {
                                message.block_sequence_number = data.block_sequence_number;
                            }
                            if (data.operation_sequence_number != null) {
                                message.operation_sequence_number = data.operation_sequence_number;
                            }
                            if (data.block_timestamp != null) {
                                message.block_timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.block_timestamp);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.block_sequence_number != null) {
                                data.block_sequence_number = this.block_sequence_number;
                            }
                            if (this.operation_sequence_number != null) {
                                data.operation_sequence_number = this.operation_sequence_number;
                            }
                            if (this.block_timestamp != null) {
                                data.block_timestamp = this.block_timestamp.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.block_sequence_number != 0)
                                writer.writeUint32(2, this.block_sequence_number);
                            if (this.operation_sequence_number != 0)
                                writer.writeUint32(3, this.operation_sequence_number);
                            if (this.has_block_timestamp)
                                writer.writeMessage(4, this.block_timestamp, () => this.block_timestamp.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimestampInfo();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 2:
                                        message.block_sequence_number = reader.readUint32();
                                        break;
                                    case 3:
                                        message.operation_sequence_number = reader.readUint32();
                                        break;
                                    case 4:
                                        reader.readMessage(message.block_timestamp, () => message.block_timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return TimestampInfo.deserialize(bytes);
                        }
                    }
                    protos.TimestampInfo = TimestampInfo;
                    class ECKeyData extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("curve" in data && data.curve != undefined) {
                                    this.curve = data.curve;
                                }
                                if ("x" in data && data.x != undefined) {
                                    this.x = data.x;
                                }
                                if ("y" in data && data.y != undefined) {
                                    this.y = data.y;
                                }
                            }
                        }
                        get curve() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set curve(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get x() {
                            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array());
                        }
                        set x(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get y() {
                            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array());
                        }
                        set y(value) {
                            pb_1.Message.setField(this, 3, value);
                        }
                        static fromObject(data) {
                            const message = new ECKeyData({});
                            if (data.curve != null) {
                                message.curve = data.curve;
                            }
                            if (data.x != null) {
                                message.x = data.x;
                            }
                            if (data.y != null) {
                                message.y = data.y;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.curve != null) {
                                data.curve = this.curve;
                            }
                            if (this.x != null) {
                                data.x = this.x;
                            }
                            if (this.y != null) {
                                data.y = this.y;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.curve.length)
                                writer.writeString(1, this.curve);
                            if (this.x.length)
                                writer.writeBytes(2, this.x);
                            if (this.y.length)
                                writer.writeBytes(3, this.y);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ECKeyData();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.curve = reader.readString();
                                        break;
                                    case 2:
                                        message.x = reader.readBytes();
                                        break;
                                    case 3:
                                        message.y = reader.readBytes();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return ECKeyData.deserialize(bytes);
                        }
                    }
                    protos.ECKeyData = ECKeyData;
                    class CompressedECKeyData extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("curve" in data && data.curve != undefined) {
                                    this.curve = data.curve;
                                }
                                if ("data" in data && data.data != undefined) {
                                    this.data = data.data;
                                }
                            }
                        }
                        get curve() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set curve(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get data() {
                            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array());
                        }
                        set data(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        static fromObject(data) {
                            const message = new CompressedECKeyData({});
                            if (data.curve != null) {
                                message.curve = data.curve;
                            }
                            if (data.data != null) {
                                message.data = data.data;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.curve != null) {
                                data.curve = this.curve;
                            }
                            if (this.data != null) {
                                data.data = this.data;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.curve.length)
                                writer.writeString(1, this.curve);
                            if (this.data.length)
                                writer.writeBytes(2, this.data);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompressedECKeyData();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.curve = reader.readString();
                                        break;
                                    case 2:
                                        message.data = reader.readBytes();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return CompressedECKeyData.deserialize(bytes);
                        }
                    }
                    protos.CompressedECKeyData = CompressedECKeyData;
                    class PublicKey extends pb_1.Message {
                        #one_of_decls = [[8, 9]];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("id" in data && data.id != undefined) {
                                    this.id = data.id;
                                }
                                if ("usage" in data && data.usage != undefined) {
                                    this.usage = data.usage;
                                }
                                if ("added_on" in data && data.added_on != undefined) {
                                    this.added_on = data.added_on;
                                }
                                if ("revoked_on" in data && data.revoked_on != undefined) {
                                    this.revoked_on = data.revoked_on;
                                }
                                if ("ec_key_data" in data && data.ec_key_data != undefined) {
                                    this.ec_key_data = data.ec_key_data;
                                }
                                if ("compressed_ec_key_data" in data && data.compressed_ec_key_data != undefined) {
                                    this.compressed_ec_key_data = data.compressed_ec_key_data;
                                }
                            }
                        }
                        get id() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set id(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get usage() {
                            return pb_1.Message.getFieldWithDefault(this, 2, KeyUsage.UNKNOWN_KEY);
                        }
                        set usage(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get added_on() {
                            return pb_1.Message.getWrapperField(this, LedgerData, 5);
                        }
                        set added_on(value) {
                            pb_1.Message.setWrapperField(this, 5, value);
                        }
                        get has_added_on() {
                            return pb_1.Message.getField(this, 5) != null;
                        }
                        get revoked_on() {
                            return pb_1.Message.getWrapperField(this, LedgerData, 6);
                        }
                        set revoked_on(value) {
                            pb_1.Message.setWrapperField(this, 6, value);
                        }
                        get has_revoked_on() {
                            return pb_1.Message.getField(this, 6) != null;
                        }
                        get ec_key_data() {
                            return pb_1.Message.getWrapperField(this, ECKeyData, 8);
                        }
                        set ec_key_data(value) {
                            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
                        }
                        get has_ec_key_data() {
                            return pb_1.Message.getField(this, 8) != null;
                        }
                        get compressed_ec_key_data() {
                            return pb_1.Message.getWrapperField(this, CompressedECKeyData, 9);
                        }
                        set compressed_ec_key_data(value) {
                            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
                        }
                        get has_compressed_ec_key_data() {
                            return pb_1.Message.getField(this, 9) != null;
                        }
                        get key_data() {
                            const cases = {
                                0: "none",
                                8: "ec_key_data",
                                9: "compressed_ec_key_data"
                            };
                            return cases[pb_1.Message.computeOneofCase(this, [8, 9])];
                        }
                        static fromObject(data) {
                            const message = new PublicKey({});
                            if (data.id != null) {
                                message.id = data.id;
                            }
                            if (data.usage != null) {
                                message.usage = data.usage;
                            }
                            if (data.added_on != null) {
                                message.added_on = LedgerData.fromObject(data.added_on);
                            }
                            if (data.revoked_on != null) {
                                message.revoked_on = LedgerData.fromObject(data.revoked_on);
                            }
                            if (data.ec_key_data != null) {
                                message.ec_key_data = ECKeyData.fromObject(data.ec_key_data);
                            }
                            if (data.compressed_ec_key_data != null) {
                                message.compressed_ec_key_data = CompressedECKeyData.fromObject(data.compressed_ec_key_data);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.id != null) {
                                data.id = this.id;
                            }
                            if (this.usage != null) {
                                data.usage = this.usage;
                            }
                            if (this.added_on != null) {
                                data.added_on = this.added_on.toObject();
                            }
                            if (this.revoked_on != null) {
                                data.revoked_on = this.revoked_on.toObject();
                            }
                            if (this.ec_key_data != null) {
                                data.ec_key_data = this.ec_key_data.toObject();
                            }
                            if (this.compressed_ec_key_data != null) {
                                data.compressed_ec_key_data = this.compressed_ec_key_data.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.id.length)
                                writer.writeString(1, this.id);
                            if (this.usage != KeyUsage.UNKNOWN_KEY)
                                writer.writeEnum(2, this.usage);
                            if (this.has_added_on)
                                writer.writeMessage(5, this.added_on, () => this.added_on.serialize(writer));
                            if (this.has_revoked_on)
                                writer.writeMessage(6, this.revoked_on, () => this.revoked_on.serialize(writer));
                            if (this.has_ec_key_data)
                                writer.writeMessage(8, this.ec_key_data, () => this.ec_key_data.serialize(writer));
                            if (this.has_compressed_ec_key_data)
                                writer.writeMessage(9, this.compressed_ec_key_data, () => this.compressed_ec_key_data.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicKey();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.id = reader.readString();
                                        break;
                                    case 2:
                                        message.usage = reader.readEnum();
                                        break;
                                    case 5:
                                        reader.readMessage(message.added_on, () => message.added_on = LedgerData.deserialize(reader));
                                        break;
                                    case 6:
                                        reader.readMessage(message.revoked_on, () => message.revoked_on = LedgerData.deserialize(reader));
                                        break;
                                    case 8:
                                        reader.readMessage(message.ec_key_data, () => message.ec_key_data = ECKeyData.deserialize(reader));
                                        break;
                                    case 9:
                                        reader.readMessage(message.compressed_ec_key_data, () => message.compressed_ec_key_data = CompressedECKeyData.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return PublicKey.deserialize(bytes);
                        }
                    }
                    protos.PublicKey = PublicKey;
                    class DIDData extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("id" in data && data.id != undefined) {
                                    this.id = data.id;
                                }
                                if ("public_keys" in data && data.public_keys != undefined) {
                                    this.public_keys = data.public_keys;
                                }
                                if ("services" in data && data.services != undefined) {
                                    this.services = data.services;
                                }
                            }
                        }
                        get id() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set id(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get public_keys() {
                            return pb_1.Message.getRepeatedWrapperField(this, PublicKey, 2);
                        }
                        set public_keys(value) {
                            pb_1.Message.setRepeatedWrapperField(this, 2, value);
                        }
                        get services() {
                            return pb_1.Message.getRepeatedWrapperField(this, Service, 3);
                        }
                        set services(value) {
                            pb_1.Message.setRepeatedWrapperField(this, 3, value);
                        }
                        static fromObject(data) {
                            const message = new DIDData({});
                            if (data.id != null) {
                                message.id = data.id;
                            }
                            if (data.public_keys != null) {
                                message.public_keys = data.public_keys.map(item => PublicKey.fromObject(item));
                            }
                            if (data.services != null) {
                                message.services = data.services.map(item => Service.fromObject(item));
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.id != null) {
                                data.id = this.id;
                            }
                            if (this.public_keys != null) {
                                data.public_keys = this.public_keys.map((item) => item.toObject());
                            }
                            if (this.services != null) {
                                data.services = this.services.map((item) => item.toObject());
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.id.length)
                                writer.writeString(1, this.id);
                            if (this.public_keys.length)
                                writer.writeRepeatedMessage(2, this.public_keys, (item) => item.serialize(writer));
                            if (this.services.length)
                                writer.writeRepeatedMessage(3, this.services, (item) => item.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DIDData();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.id = reader.readString();
                                        break;
                                    case 2:
                                        reader.readMessage(message.public_keys, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PublicKey.deserialize(reader), PublicKey));
                                        break;
                                    case 3:
                                        reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Service.deserialize(reader), Service));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return DIDData.deserialize(bytes);
                        }
                    }
                    protos.DIDData = DIDData;
                    class CreateDIDOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("did_data" in data && data.did_data != undefined) {
                                    this.did_data = data.did_data;
                                }
                            }
                        }
                        get did_data() {
                            return pb_1.Message.getWrapperField(this, CreateDIDOperation.DIDCreationData, 1);
                        }
                        set did_data(value) {
                            pb_1.Message.setWrapperField(this, 1, value);
                        }
                        get has_did_data() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        static fromObject(data) {
                            const message = new CreateDIDOperation({});
                            if (data.did_data != null) {
                                message.did_data = CreateDIDOperation.DIDCreationData.fromObject(data.did_data);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.did_data != null) {
                                data.did_data = this.did_data.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_did_data)
                                writer.writeMessage(1, this.did_data, () => this.did_data.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDIDOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.did_data, () => message.did_data = CreateDIDOperation.DIDCreationData.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return CreateDIDOperation.deserialize(bytes);
                        }
                    }
                    protos.CreateDIDOperation = CreateDIDOperation;
                    (function (CreateDIDOperation) {
                        class DIDCreationData extends pb_1.Message {
                            #one_of_decls = [];
                            constructor(data) {
                                super();
                                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                                if (!Array.isArray(data) && typeof data == "object") {
                                    if ("public_keys" in data && data.public_keys != undefined) {
                                        this.public_keys = data.public_keys;
                                    }
                                    if ("services" in data && data.services != undefined) {
                                        this.services = data.services;
                                    }
                                }
                            }
                            get public_keys() {
                                return pb_1.Message.getRepeatedWrapperField(this, PublicKey, 2);
                            }
                            set public_keys(value) {
                                pb_1.Message.setRepeatedWrapperField(this, 2, value);
                            }
                            get services() {
                                return pb_1.Message.getRepeatedWrapperField(this, Service, 3);
                            }
                            set services(value) {
                                pb_1.Message.setRepeatedWrapperField(this, 3, value);
                            }
                            static fromObject(data) {
                                const message = new DIDCreationData({});
                                if (data.public_keys != null) {
                                    message.public_keys = data.public_keys.map(item => PublicKey.fromObject(item));
                                }
                                if (data.services != null) {
                                    message.services = data.services.map(item => Service.fromObject(item));
                                }
                                return message;
                            }
                            toObject() {
                                const data = {};
                                if (this.public_keys != null) {
                                    data.public_keys = this.public_keys.map((item) => item.toObject());
                                }
                                if (this.services != null) {
                                    data.services = this.services.map((item) => item.toObject());
                                }
                                return data;
                            }
                            serialize(w) {
                                const writer = w || new pb_1.BinaryWriter();
                                if (this.public_keys.length)
                                    writer.writeRepeatedMessage(2, this.public_keys, (item) => item.serialize(writer));
                                if (this.services.length)
                                    writer.writeRepeatedMessage(3, this.services, (item) => item.serialize(writer));
                                if (!w)
                                    return writer.getResultBuffer();
                            }
                            static deserialize(bytes) {
                                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DIDCreationData();
                                while (reader.nextField()) {
                                    if (reader.isEndGroup())
                                        break;
                                    switch (reader.getFieldNumber()) {
                                        case 2:
                                            reader.readMessage(message.public_keys, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PublicKey.deserialize(reader), PublicKey));
                                            break;
                                        case 3:
                                            reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Service.deserialize(reader), Service));
                                            break;
                                        default: reader.skipField();
                                    }
                                }
                                return message;
                            }
                            serializeBinary() {
                                return this.serialize();
                            }
                            static deserializeBinary(bytes) {
                                return DIDCreationData.deserialize(bytes);
                            }
                        }
                        CreateDIDOperation.DIDCreationData = DIDCreationData;
                    })(CreateDIDOperation = protos.CreateDIDOperation || (protos.CreateDIDOperation = {}));
                    class AddKeyAction extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("key" in data && data.key != undefined) {
                                    this.key = data.key;
                                }
                            }
                        }
                        get key() {
                            return pb_1.Message.getWrapperField(this, PublicKey, 1);
                        }
                        set key(value) {
                            pb_1.Message.setWrapperField(this, 1, value);
                        }
                        get has_key() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        static fromObject(data) {
                            const message = new AddKeyAction({});
                            if (data.key != null) {
                                message.key = PublicKey.fromObject(data.key);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.key != null) {
                                data.key = this.key.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_key)
                                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddKeyAction();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.key, () => message.key = PublicKey.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return AddKeyAction.deserialize(bytes);
                        }
                    }
                    protos.AddKeyAction = AddKeyAction;
                    class RemoveKeyAction extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("keyId" in data && data.keyId != undefined) {
                                    this.keyId = data.keyId;
                                }
                            }
                        }
                        get keyId() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set keyId(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        static fromObject(data) {
                            const message = new RemoveKeyAction({});
                            if (data.keyId != null) {
                                message.keyId = data.keyId;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.keyId != null) {
                                data.keyId = this.keyId;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.keyId.length)
                                writer.writeString(1, this.keyId);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveKeyAction();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.keyId = reader.readString();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return RemoveKeyAction.deserialize(bytes);
                        }
                    }
                    protos.RemoveKeyAction = RemoveKeyAction;
                    class AddServiceAction extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("service" in data && data.service != undefined) {
                                    this.service = data.service;
                                }
                            }
                        }
                        get service() {
                            return pb_1.Message.getWrapperField(this, Service, 1);
                        }
                        set service(value) {
                            pb_1.Message.setWrapperField(this, 1, value);
                        }
                        get has_service() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        static fromObject(data) {
                            const message = new AddServiceAction({});
                            if (data.service != null) {
                                message.service = Service.fromObject(data.service);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.service != null) {
                                data.service = this.service.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_service)
                                writer.writeMessage(1, this.service, () => this.service.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddServiceAction();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.service, () => message.service = Service.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return AddServiceAction.deserialize(bytes);
                        }
                    }
                    protos.AddServiceAction = AddServiceAction;
                    class RemoveServiceAction extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("serviceId" in data && data.serviceId != undefined) {
                                    this.serviceId = data.serviceId;
                                }
                            }
                        }
                        get serviceId() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set serviceId(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        static fromObject(data) {
                            const message = new RemoveServiceAction({});
                            if (data.serviceId != null) {
                                message.serviceId = data.serviceId;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.serviceId != null) {
                                data.serviceId = this.serviceId;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.serviceId.length)
                                writer.writeString(1, this.serviceId);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveServiceAction();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.serviceId = reader.readString();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return RemoveServiceAction.deserialize(bytes);
                        }
                    }
                    protos.RemoveServiceAction = RemoveServiceAction;
                    class UpdateServiceAction extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("serviceId" in data && data.serviceId != undefined) {
                                    this.serviceId = data.serviceId;
                                }
                                if ("type" in data && data.type != undefined) {
                                    this.type = data.type;
                                }
                                if ("service_endpoints" in data && data.service_endpoints != undefined) {
                                    this.service_endpoints = data.service_endpoints;
                                }
                            }
                        }
                        get serviceId() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set serviceId(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get type() {
                            return pb_1.Message.getFieldWithDefault(this, 2, "");
                        }
                        set type(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get service_endpoints() {
                            return pb_1.Message.getFieldWithDefault(this, 3, []);
                        }
                        set service_endpoints(value) {
                            pb_1.Message.setField(this, 3, value);
                        }
                        static fromObject(data) {
                            const message = new UpdateServiceAction({});
                            if (data.serviceId != null) {
                                message.serviceId = data.serviceId;
                            }
                            if (data.type != null) {
                                message.type = data.type;
                            }
                            if (data.service_endpoints != null) {
                                message.service_endpoints = data.service_endpoints;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.serviceId != null) {
                                data.serviceId = this.serviceId;
                            }
                            if (this.type != null) {
                                data.type = this.type;
                            }
                            if (this.service_endpoints != null) {
                                data.service_endpoints = this.service_endpoints;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.serviceId.length)
                                writer.writeString(1, this.serviceId);
                            if (this.type.length)
                                writer.writeString(2, this.type);
                            if (this.service_endpoints.length)
                                writer.writeRepeatedString(3, this.service_endpoints);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateServiceAction();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.serviceId = reader.readString();
                                        break;
                                    case 2:
                                        message.type = reader.readString();
                                        break;
                                    case 3:
                                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return UpdateServiceAction.deserialize(bytes);
                        }
                    }
                    protos.UpdateServiceAction = UpdateServiceAction;
                    class UpdateDIDAction extends pb_1.Message {
                        #one_of_decls = [[1, 2, 3, 4, 5]];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("add_key" in data && data.add_key != undefined) {
                                    this.add_key = data.add_key;
                                }
                                if ("remove_key" in data && data.remove_key != undefined) {
                                    this.remove_key = data.remove_key;
                                }
                                if ("add_service" in data && data.add_service != undefined) {
                                    this.add_service = data.add_service;
                                }
                                if ("remove_service" in data && data.remove_service != undefined) {
                                    this.remove_service = data.remove_service;
                                }
                                if ("update_service" in data && data.update_service != undefined) {
                                    this.update_service = data.update_service;
                                }
                            }
                        }
                        get add_key() {
                            return pb_1.Message.getWrapperField(this, AddKeyAction, 1);
                        }
                        set add_key(value) {
                            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
                        }
                        get has_add_key() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        get remove_key() {
                            return pb_1.Message.getWrapperField(this, RemoveKeyAction, 2);
                        }
                        set remove_key(value) {
                            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
                        }
                        get has_remove_key() {
                            return pb_1.Message.getField(this, 2) != null;
                        }
                        get add_service() {
                            return pb_1.Message.getWrapperField(this, AddServiceAction, 3);
                        }
                        set add_service(value) {
                            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
                        }
                        get has_add_service() {
                            return pb_1.Message.getField(this, 3) != null;
                        }
                        get remove_service() {
                            return pb_1.Message.getWrapperField(this, RemoveServiceAction, 4);
                        }
                        set remove_service(value) {
                            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
                        }
                        get has_remove_service() {
                            return pb_1.Message.getField(this, 4) != null;
                        }
                        get update_service() {
                            return pb_1.Message.getWrapperField(this, UpdateServiceAction, 5);
                        }
                        set update_service(value) {
                            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
                        }
                        get has_update_service() {
                            return pb_1.Message.getField(this, 5) != null;
                        }
                        get action() {
                            const cases = {
                                0: "none",
                                1: "add_key",
                                2: "remove_key",
                                3: "add_service",
                                4: "remove_service",
                                5: "update_service"
                            };
                            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
                        }
                        static fromObject(data) {
                            const message = new UpdateDIDAction({});
                            if (data.add_key != null) {
                                message.add_key = AddKeyAction.fromObject(data.add_key);
                            }
                            if (data.remove_key != null) {
                                message.remove_key = RemoveKeyAction.fromObject(data.remove_key);
                            }
                            if (data.add_service != null) {
                                message.add_service = AddServiceAction.fromObject(data.add_service);
                            }
                            if (data.remove_service != null) {
                                message.remove_service = RemoveServiceAction.fromObject(data.remove_service);
                            }
                            if (data.update_service != null) {
                                message.update_service = UpdateServiceAction.fromObject(data.update_service);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.add_key != null) {
                                data.add_key = this.add_key.toObject();
                            }
                            if (this.remove_key != null) {
                                data.remove_key = this.remove_key.toObject();
                            }
                            if (this.add_service != null) {
                                data.add_service = this.add_service.toObject();
                            }
                            if (this.remove_service != null) {
                                data.remove_service = this.remove_service.toObject();
                            }
                            if (this.update_service != null) {
                                data.update_service = this.update_service.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_add_key)
                                writer.writeMessage(1, this.add_key, () => this.add_key.serialize(writer));
                            if (this.has_remove_key)
                                writer.writeMessage(2, this.remove_key, () => this.remove_key.serialize(writer));
                            if (this.has_add_service)
                                writer.writeMessage(3, this.add_service, () => this.add_service.serialize(writer));
                            if (this.has_remove_service)
                                writer.writeMessage(4, this.remove_service, () => this.remove_service.serialize(writer));
                            if (this.has_update_service)
                                writer.writeMessage(5, this.update_service, () => this.update_service.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDIDAction();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.add_key, () => message.add_key = AddKeyAction.deserialize(reader));
                                        break;
                                    case 2:
                                        reader.readMessage(message.remove_key, () => message.remove_key = RemoveKeyAction.deserialize(reader));
                                        break;
                                    case 3:
                                        reader.readMessage(message.add_service, () => message.add_service = AddServiceAction.deserialize(reader));
                                        break;
                                    case 4:
                                        reader.readMessage(message.remove_service, () => message.remove_service = RemoveServiceAction.deserialize(reader));
                                        break;
                                    case 5:
                                        reader.readMessage(message.update_service, () => message.update_service = UpdateServiceAction.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return UpdateDIDAction.deserialize(bytes);
                        }
                    }
                    protos.UpdateDIDAction = UpdateDIDAction;
                    class UpdateDIDOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("previous_operation_hash" in data && data.previous_operation_hash != undefined) {
                                    this.previous_operation_hash = data.previous_operation_hash;
                                }
                                if ("id" in data && data.id != undefined) {
                                    this.id = data.id;
                                }
                                if ("actions" in data && data.actions != undefined) {
                                    this.actions = data.actions;
                                }
                            }
                        }
                        get previous_operation_hash() {
                            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array());
                        }
                        set previous_operation_hash(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get id() {
                            return pb_1.Message.getFieldWithDefault(this, 2, "");
                        }
                        set id(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get actions() {
                            return pb_1.Message.getRepeatedWrapperField(this, UpdateDIDAction, 3);
                        }
                        set actions(value) {
                            pb_1.Message.setRepeatedWrapperField(this, 3, value);
                        }
                        static fromObject(data) {
                            const message = new UpdateDIDOperation({});
                            if (data.previous_operation_hash != null) {
                                message.previous_operation_hash = data.previous_operation_hash;
                            }
                            if (data.id != null) {
                                message.id = data.id;
                            }
                            if (data.actions != null) {
                                message.actions = data.actions.map(item => UpdateDIDAction.fromObject(item));
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.previous_operation_hash != null) {
                                data.previous_operation_hash = this.previous_operation_hash;
                            }
                            if (this.id != null) {
                                data.id = this.id;
                            }
                            if (this.actions != null) {
                                data.actions = this.actions.map((item) => item.toObject());
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.previous_operation_hash.length)
                                writer.writeBytes(1, this.previous_operation_hash);
                            if (this.id.length)
                                writer.writeString(2, this.id);
                            if (this.actions.length)
                                writer.writeRepeatedMessage(3, this.actions, (item) => item.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDIDOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.previous_operation_hash = reader.readBytes();
                                        break;
                                    case 2:
                                        message.id = reader.readString();
                                        break;
                                    case 3:
                                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UpdateDIDAction.deserialize(reader), UpdateDIDAction));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return UpdateDIDOperation.deserialize(bytes);
                        }
                    }
                    protos.UpdateDIDOperation = UpdateDIDOperation;
                    class CredentialBatchData extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("issuer_did" in data && data.issuer_did != undefined) {
                                    this.issuer_did = data.issuer_did;
                                }
                                if ("merkle_root" in data && data.merkle_root != undefined) {
                                    this.merkle_root = data.merkle_root;
                                }
                            }
                        }
                        get issuer_did() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set issuer_did(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get merkle_root() {
                            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array());
                        }
                        set merkle_root(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        static fromObject(data) {
                            const message = new CredentialBatchData({});
                            if (data.issuer_did != null) {
                                message.issuer_did = data.issuer_did;
                            }
                            if (data.merkle_root != null) {
                                message.merkle_root = data.merkle_root;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.issuer_did != null) {
                                data.issuer_did = this.issuer_did;
                            }
                            if (this.merkle_root != null) {
                                data.merkle_root = this.merkle_root;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.issuer_did.length)
                                writer.writeString(1, this.issuer_did);
                            if (this.merkle_root.length)
                                writer.writeBytes(2, this.merkle_root);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialBatchData();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.issuer_did = reader.readString();
                                        break;
                                    case 2:
                                        message.merkle_root = reader.readBytes();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return CredentialBatchData.deserialize(bytes);
                        }
                    }
                    protos.CredentialBatchData = CredentialBatchData;
                    class IssueCredentialBatchOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("credential_batch_data" in data && data.credential_batch_data != undefined) {
                                    this.credential_batch_data = data.credential_batch_data;
                                }
                            }
                        }
                        get credential_batch_data() {
                            return pb_1.Message.getWrapperField(this, CredentialBatchData, 1);
                        }
                        set credential_batch_data(value) {
                            pb_1.Message.setWrapperField(this, 1, value);
                        }
                        get has_credential_batch_data() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        static fromObject(data) {
                            const message = new IssueCredentialBatchOperation({});
                            if (data.credential_batch_data != null) {
                                message.credential_batch_data = CredentialBatchData.fromObject(data.credential_batch_data);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.credential_batch_data != null) {
                                data.credential_batch_data = this.credential_batch_data.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_credential_batch_data)
                                writer.writeMessage(1, this.credential_batch_data, () => this.credential_batch_data.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueCredentialBatchOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.credential_batch_data, () => message.credential_batch_data = CredentialBatchData.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return IssueCredentialBatchOperation.deserialize(bytes);
                        }
                    }
                    protos.IssueCredentialBatchOperation = IssueCredentialBatchOperation;
                    class RevokeCredentialsOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("previous_operation_hash" in data && data.previous_operation_hash != undefined) {
                                    this.previous_operation_hash = data.previous_operation_hash;
                                }
                                if ("credential_batch_id" in data && data.credential_batch_id != undefined) {
                                    this.credential_batch_id = data.credential_batch_id;
                                }
                                if ("credentials_to_revoke" in data && data.credentials_to_revoke != undefined) {
                                    this.credentials_to_revoke = data.credentials_to_revoke;
                                }
                            }
                        }
                        get previous_operation_hash() {
                            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array());
                        }
                        set previous_operation_hash(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get credential_batch_id() {
                            return pb_1.Message.getFieldWithDefault(this, 2, "");
                        }
                        set credential_batch_id(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get credentials_to_revoke() {
                            return pb_1.Message.getFieldWithDefault(this, 3, []);
                        }
                        set credentials_to_revoke(value) {
                            pb_1.Message.setField(this, 3, value);
                        }
                        static fromObject(data) {
                            const message = new RevokeCredentialsOperation({});
                            if (data.previous_operation_hash != null) {
                                message.previous_operation_hash = data.previous_operation_hash;
                            }
                            if (data.credential_batch_id != null) {
                                message.credential_batch_id = data.credential_batch_id;
                            }
                            if (data.credentials_to_revoke != null) {
                                message.credentials_to_revoke = data.credentials_to_revoke;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.previous_operation_hash != null) {
                                data.previous_operation_hash = this.previous_operation_hash;
                            }
                            if (this.credential_batch_id != null) {
                                data.credential_batch_id = this.credential_batch_id;
                            }
                            if (this.credentials_to_revoke != null) {
                                data.credentials_to_revoke = this.credentials_to_revoke;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.previous_operation_hash.length)
                                writer.writeBytes(1, this.previous_operation_hash);
                            if (this.credential_batch_id.length)
                                writer.writeString(2, this.credential_batch_id);
                            if (this.credentials_to_revoke.length)
                                writer.writeRepeatedBytes(3, this.credentials_to_revoke);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeCredentialsOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.previous_operation_hash = reader.readBytes();
                                        break;
                                    case 2:
                                        message.credential_batch_id = reader.readString();
                                        break;
                                    case 3:
                                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return RevokeCredentialsOperation.deserialize(bytes);
                        }
                    }
                    protos.RevokeCredentialsOperation = RevokeCredentialsOperation;
                    class ProtocolVersionUpdateOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("proposer_did" in data && data.proposer_did != undefined) {
                                    this.proposer_did = data.proposer_did;
                                }
                                if ("version" in data && data.version != undefined) {
                                    this.version = data.version;
                                }
                            }
                        }
                        get proposer_did() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set proposer_did(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get version() {
                            return pb_1.Message.getWrapperField(this, ProtocolVersionInfo, 2);
                        }
                        set version(value) {
                            pb_1.Message.setWrapperField(this, 2, value);
                        }
                        get has_version() {
                            return pb_1.Message.getField(this, 2) != null;
                        }
                        static fromObject(data) {
                            const message = new ProtocolVersionUpdateOperation({});
                            if (data.proposer_did != null) {
                                message.proposer_did = data.proposer_did;
                            }
                            if (data.version != null) {
                                message.version = ProtocolVersionInfo.fromObject(data.version);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.proposer_did != null) {
                                data.proposer_did = this.proposer_did;
                            }
                            if (this.version != null) {
                                data.version = this.version.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.proposer_did.length)
                                writer.writeString(1, this.proposer_did);
                            if (this.has_version)
                                writer.writeMessage(2, this.version, () => this.version.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersionUpdateOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.proposer_did = reader.readString();
                                        break;
                                    case 2:
                                        reader.readMessage(message.version, () => message.version = ProtocolVersionInfo.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return ProtocolVersionUpdateOperation.deserialize(bytes);
                        }
                    }
                    protos.ProtocolVersionUpdateOperation = ProtocolVersionUpdateOperation;
                    class ProtocolVersion extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("major_version" in data && data.major_version != undefined) {
                                    this.major_version = data.major_version;
                                }
                                if ("minor_version" in data && data.minor_version != undefined) {
                                    this.minor_version = data.minor_version;
                                }
                            }
                        }
                        get major_version() {
                            return pb_1.Message.getFieldWithDefault(this, 1, 0);
                        }
                        set major_version(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get minor_version() {
                            return pb_1.Message.getFieldWithDefault(this, 2, 0);
                        }
                        set minor_version(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        static fromObject(data) {
                            const message = new ProtocolVersion({});
                            if (data.major_version != null) {
                                message.major_version = data.major_version;
                            }
                            if (data.minor_version != null) {
                                message.minor_version = data.minor_version;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.major_version != null) {
                                data.major_version = this.major_version;
                            }
                            if (this.minor_version != null) {
                                data.minor_version = this.minor_version;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.major_version != 0)
                                writer.writeInt32(1, this.major_version);
                            if (this.minor_version != 0)
                                writer.writeInt32(2, this.minor_version);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersion();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.major_version = reader.readInt32();
                                        break;
                                    case 2:
                                        message.minor_version = reader.readInt32();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return ProtocolVersion.deserialize(bytes);
                        }
                    }
                    protos.ProtocolVersion = ProtocolVersion;
                    class ProtocolVersionInfo extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("version_name" in data && data.version_name != undefined) {
                                    this.version_name = data.version_name;
                                }
                                if ("effective_since" in data && data.effective_since != undefined) {
                                    this.effective_since = data.effective_since;
                                }
                                if ("protocol_version" in data && data.protocol_version != undefined) {
                                    this.protocol_version = data.protocol_version;
                                }
                            }
                        }
                        get version_name() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set version_name(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get effective_since() {
                            return pb_1.Message.getFieldWithDefault(this, 4, 0);
                        }
                        set effective_since(value) {
                            pb_1.Message.setField(this, 4, value);
                        }
                        get protocol_version() {
                            return pb_1.Message.getWrapperField(this, ProtocolVersion, 5);
                        }
                        set protocol_version(value) {
                            pb_1.Message.setWrapperField(this, 5, value);
                        }
                        get has_protocol_version() {
                            return pb_1.Message.getField(this, 5) != null;
                        }
                        static fromObject(data) {
                            const message = new ProtocolVersionInfo({});
                            if (data.version_name != null) {
                                message.version_name = data.version_name;
                            }
                            if (data.effective_since != null) {
                                message.effective_since = data.effective_since;
                            }
                            if (data.protocol_version != null) {
                                message.protocol_version = ProtocolVersion.fromObject(data.protocol_version);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.version_name != null) {
                                data.version_name = this.version_name;
                            }
                            if (this.effective_since != null) {
                                data.effective_since = this.effective_since;
                            }
                            if (this.protocol_version != null) {
                                data.protocol_version = this.protocol_version.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.version_name.length)
                                writer.writeString(1, this.version_name);
                            if (this.effective_since != 0)
                                writer.writeInt32(4, this.effective_since);
                            if (this.has_protocol_version)
                                writer.writeMessage(5, this.protocol_version, () => this.protocol_version.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersionInfo();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.version_name = reader.readString();
                                        break;
                                    case 4:
                                        message.effective_since = reader.readInt32();
                                        break;
                                    case 5:
                                        reader.readMessage(message.protocol_version, () => message.protocol_version = ProtocolVersion.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return ProtocolVersionInfo.deserialize(bytes);
                        }
                    }
                    protos.ProtocolVersionInfo = ProtocolVersionInfo;
                    class DeactivateDIDOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("previous_operation_hash" in data && data.previous_operation_hash != undefined) {
                                    this.previous_operation_hash = data.previous_operation_hash;
                                }
                                if ("id" in data && data.id != undefined) {
                                    this.id = data.id;
                                }
                            }
                        }
                        get previous_operation_hash() {
                            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array());
                        }
                        set previous_operation_hash(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get id() {
                            return pb_1.Message.getFieldWithDefault(this, 2, "");
                        }
                        set id(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        static fromObject(data) {
                            const message = new DeactivateDIDOperation({});
                            if (data.previous_operation_hash != null) {
                                message.previous_operation_hash = data.previous_operation_hash;
                            }
                            if (data.id != null) {
                                message.id = data.id;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.previous_operation_hash != null) {
                                data.previous_operation_hash = this.previous_operation_hash;
                            }
                            if (this.id != null) {
                                data.id = this.id;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.previous_operation_hash.length)
                                writer.writeBytes(1, this.previous_operation_hash);
                            if (this.id.length)
                                writer.writeString(2, this.id);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateDIDOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.previous_operation_hash = reader.readBytes();
                                        break;
                                    case 2:
                                        message.id = reader.readString();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return DeactivateDIDOperation.deserialize(bytes);
                        }
                    }
                    protos.DeactivateDIDOperation = DeactivateDIDOperation;
                    class AtalaOperation extends pb_1.Message {
                        #one_of_decls = [[1, 2, 3, 4, 5, 6]];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("create_did" in data && data.create_did != undefined) {
                                    this.create_did = data.create_did;
                                }
                                if ("update_did" in data && data.update_did != undefined) {
                                    this.update_did = data.update_did;
                                }
                                if ("issue_credential_batch" in data && data.issue_credential_batch != undefined) {
                                    this.issue_credential_batch = data.issue_credential_batch;
                                }
                                if ("revoke_credentials" in data && data.revoke_credentials != undefined) {
                                    this.revoke_credentials = data.revoke_credentials;
                                }
                                if ("protocol_version_update" in data && data.protocol_version_update != undefined) {
                                    this.protocol_version_update = data.protocol_version_update;
                                }
                                if ("deactivate_did" in data && data.deactivate_did != undefined) {
                                    this.deactivate_did = data.deactivate_did;
                                }
                            }
                        }
                        get create_did() {
                            return pb_1.Message.getWrapperField(this, CreateDIDOperation, 1);
                        }
                        set create_did(value) {
                            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
                        }
                        get has_create_did() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        get update_did() {
                            return pb_1.Message.getWrapperField(this, UpdateDIDOperation, 2);
                        }
                        set update_did(value) {
                            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
                        }
                        get has_update_did() {
                            return pb_1.Message.getField(this, 2) != null;
                        }
                        get issue_credential_batch() {
                            return pb_1.Message.getWrapperField(this, IssueCredentialBatchOperation, 3);
                        }
                        set issue_credential_batch(value) {
                            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
                        }
                        get has_issue_credential_batch() {
                            return pb_1.Message.getField(this, 3) != null;
                        }
                        get revoke_credentials() {
                            return pb_1.Message.getWrapperField(this, RevokeCredentialsOperation, 4);
                        }
                        set revoke_credentials(value) {
                            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
                        }
                        get has_revoke_credentials() {
                            return pb_1.Message.getField(this, 4) != null;
                        }
                        get protocol_version_update() {
                            return pb_1.Message.getWrapperField(this, ProtocolVersionUpdateOperation, 5);
                        }
                        set protocol_version_update(value) {
                            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
                        }
                        get has_protocol_version_update() {
                            return pb_1.Message.getField(this, 5) != null;
                        }
                        get deactivate_did() {
                            return pb_1.Message.getWrapperField(this, DeactivateDIDOperation, 6);
                        }
                        set deactivate_did(value) {
                            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
                        }
                        get has_deactivate_did() {
                            return pb_1.Message.getField(this, 6) != null;
                        }
                        get operation() {
                            const cases = {
                                0: "none",
                                1: "create_did",
                                2: "update_did",
                                3: "issue_credential_batch",
                                4: "revoke_credentials",
                                5: "protocol_version_update",
                                6: "deactivate_did"
                            };
                            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
                        }
                        static fromObject(data) {
                            const message = new AtalaOperation({});
                            if (data.create_did != null) {
                                message.create_did = CreateDIDOperation.fromObject(data.create_did);
                            }
                            if (data.update_did != null) {
                                message.update_did = UpdateDIDOperation.fromObject(data.update_did);
                            }
                            if (data.issue_credential_batch != null) {
                                message.issue_credential_batch = IssueCredentialBatchOperation.fromObject(data.issue_credential_batch);
                            }
                            if (data.revoke_credentials != null) {
                                message.revoke_credentials = RevokeCredentialsOperation.fromObject(data.revoke_credentials);
                            }
                            if (data.protocol_version_update != null) {
                                message.protocol_version_update = ProtocolVersionUpdateOperation.fromObject(data.protocol_version_update);
                            }
                            if (data.deactivate_did != null) {
                                message.deactivate_did = DeactivateDIDOperation.fromObject(data.deactivate_did);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.create_did != null) {
                                data.create_did = this.create_did.toObject();
                            }
                            if (this.update_did != null) {
                                data.update_did = this.update_did.toObject();
                            }
                            if (this.issue_credential_batch != null) {
                                data.issue_credential_batch = this.issue_credential_batch.toObject();
                            }
                            if (this.revoke_credentials != null) {
                                data.revoke_credentials = this.revoke_credentials.toObject();
                            }
                            if (this.protocol_version_update != null) {
                                data.protocol_version_update = this.protocol_version_update.toObject();
                            }
                            if (this.deactivate_did != null) {
                                data.deactivate_did = this.deactivate_did.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_create_did)
                                writer.writeMessage(1, this.create_did, () => this.create_did.serialize(writer));
                            if (this.has_update_did)
                                writer.writeMessage(2, this.update_did, () => this.update_did.serialize(writer));
                            if (this.has_issue_credential_batch)
                                writer.writeMessage(3, this.issue_credential_batch, () => this.issue_credential_batch.serialize(writer));
                            if (this.has_revoke_credentials)
                                writer.writeMessage(4, this.revoke_credentials, () => this.revoke_credentials.serialize(writer));
                            if (this.has_protocol_version_update)
                                writer.writeMessage(5, this.protocol_version_update, () => this.protocol_version_update.serialize(writer));
                            if (this.has_deactivate_did)
                                writer.writeMessage(6, this.deactivate_did, () => this.deactivate_did.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AtalaOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.create_did, () => message.create_did = CreateDIDOperation.deserialize(reader));
                                        break;
                                    case 2:
                                        reader.readMessage(message.update_did, () => message.update_did = UpdateDIDOperation.deserialize(reader));
                                        break;
                                    case 3:
                                        reader.readMessage(message.issue_credential_batch, () => message.issue_credential_batch = IssueCredentialBatchOperation.deserialize(reader));
                                        break;
                                    case 4:
                                        reader.readMessage(message.revoke_credentials, () => message.revoke_credentials = RevokeCredentialsOperation.deserialize(reader));
                                        break;
                                    case 5:
                                        reader.readMessage(message.protocol_version_update, () => message.protocol_version_update = ProtocolVersionUpdateOperation.deserialize(reader));
                                        break;
                                    case 6:
                                        reader.readMessage(message.deactivate_did, () => message.deactivate_did = DeactivateDIDOperation.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return AtalaOperation.deserialize(bytes);
                        }
                    }
                    protos.AtalaOperation = AtalaOperation;
                    class SignedAtalaOperation extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("signed_with" in data && data.signed_with != undefined) {
                                    this.signed_with = data.signed_with;
                                }
                                if ("signature" in data && data.signature != undefined) {
                                    this.signature = data.signature;
                                }
                                if ("operation" in data && data.operation != undefined) {
                                    this.operation = data.operation;
                                }
                            }
                        }
                        get signed_with() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set signed_with(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get signature() {
                            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array());
                        }
                        set signature(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get operation() {
                            return pb_1.Message.getWrapperField(this, AtalaOperation, 3);
                        }
                        set operation(value) {
                            pb_1.Message.setWrapperField(this, 3, value);
                        }
                        get has_operation() {
                            return pb_1.Message.getField(this, 3) != null;
                        }
                        static fromObject(data) {
                            const message = new SignedAtalaOperation({});
                            if (data.signed_with != null) {
                                message.signed_with = data.signed_with;
                            }
                            if (data.signature != null) {
                                message.signature = data.signature;
                            }
                            if (data.operation != null) {
                                message.operation = AtalaOperation.fromObject(data.operation);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.signed_with != null) {
                                data.signed_with = this.signed_with;
                            }
                            if (this.signature != null) {
                                data.signature = this.signature;
                            }
                            if (this.operation != null) {
                                data.operation = this.operation.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.signed_with.length)
                                writer.writeString(1, this.signed_with);
                            if (this.signature.length)
                                writer.writeBytes(2, this.signature);
                            if (this.has_operation)
                                writer.writeMessage(3, this.operation, () => this.operation.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedAtalaOperation();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.signed_with = reader.readString();
                                        break;
                                    case 2:
                                        message.signature = reader.readBytes();
                                        break;
                                    case 3:
                                        reader.readMessage(message.operation, () => message.operation = AtalaOperation.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return SignedAtalaOperation.deserialize(bytes);
                        }
                    }
                    protos.SignedAtalaOperation = SignedAtalaOperation;
                    class LedgerData extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("transaction_id" in data && data.transaction_id != undefined) {
                                    this.transaction_id = data.transaction_id;
                                }
                                if ("ledger" in data && data.ledger != undefined) {
                                    this.ledger = data.ledger;
                                }
                                if ("timestamp_info" in data && data.timestamp_info != undefined) {
                                    this.timestamp_info = data.timestamp_info;
                                }
                            }
                        }
                        get transaction_id() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set transaction_id(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get ledger() {
                            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.io.iohk.atala.prism.protos.Ledger.UNKNOWN_LEDGER);
                        }
                        set ledger(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get timestamp_info() {
                            return pb_1.Message.getWrapperField(this, TimestampInfo, 3);
                        }
                        set timestamp_info(value) {
                            pb_1.Message.setWrapperField(this, 3, value);
                        }
                        get has_timestamp_info() {
                            return pb_1.Message.getField(this, 3) != null;
                        }
                        static fromObject(data) {
                            const message = new LedgerData({});
                            if (data.transaction_id != null) {
                                message.transaction_id = data.transaction_id;
                            }
                            if (data.ledger != null) {
                                message.ledger = data.ledger;
                            }
                            if (data.timestamp_info != null) {
                                message.timestamp_info = TimestampInfo.fromObject(data.timestamp_info);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.transaction_id != null) {
                                data.transaction_id = this.transaction_id;
                            }
                            if (this.ledger != null) {
                                data.ledger = this.ledger;
                            }
                            if (this.timestamp_info != null) {
                                data.timestamp_info = this.timestamp_info.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.transaction_id.length)
                                writer.writeString(1, this.transaction_id);
                            if (this.ledger != dependency_1.io.iohk.atala.prism.protos.Ledger.UNKNOWN_LEDGER)
                                writer.writeEnum(2, this.ledger);
                            if (this.has_timestamp_info)
                                writer.writeMessage(3, this.timestamp_info, () => this.timestamp_info.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LedgerData();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.transaction_id = reader.readString();
                                        break;
                                    case 2:
                                        message.ledger = reader.readEnum();
                                        break;
                                    case 3:
                                        reader.readMessage(message.timestamp_info, () => message.timestamp_info = TimestampInfo.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return LedgerData.deserialize(bytes);
                        }
                    }
                    protos.LedgerData = LedgerData;
                    class OperationOutput extends pb_1.Message {
                        #one_of_decls = [[1, 2, 3, 4, 7, 8], [5, 6]];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("batch_output" in data && data.batch_output != undefined) {
                                    this.batch_output = data.batch_output;
                                }
                                if ("create_did_output" in data && data.create_did_output != undefined) {
                                    this.create_did_output = data.create_did_output;
                                }
                                if ("update_did_output" in data && data.update_did_output != undefined) {
                                    this.update_did_output = data.update_did_output;
                                }
                                if ("revoke_credentials_output" in data && data.revoke_credentials_output != undefined) {
                                    this.revoke_credentials_output = data.revoke_credentials_output;
                                }
                                if ("protocol_version_update_output" in data && data.protocol_version_update_output != undefined) {
                                    this.protocol_version_update_output = data.protocol_version_update_output;
                                }
                                if ("deactivate_did_output" in data && data.deactivate_did_output != undefined) {
                                    this.deactivate_did_output = data.deactivate_did_output;
                                }
                                if ("operation_id" in data && data.operation_id != undefined) {
                                    this.operation_id = data.operation_id;
                                }
                                if ("error" in data && data.error != undefined) {
                                    this.error = data.error;
                                }
                            }
                        }
                        get batch_output() {
                            return pb_1.Message.getWrapperField(this, IssueCredentialBatchOutput, 1);
                        }
                        set batch_output(value) {
                            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
                        }
                        get has_batch_output() {
                            return pb_1.Message.getField(this, 1) != null;
                        }
                        get create_did_output() {
                            return pb_1.Message.getWrapperField(this, CreateDIDOutput, 2);
                        }
                        set create_did_output(value) {
                            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
                        }
                        get has_create_did_output() {
                            return pb_1.Message.getField(this, 2) != null;
                        }
                        get update_did_output() {
                            return pb_1.Message.getWrapperField(this, UpdateDIDOutput, 3);
                        }
                        set update_did_output(value) {
                            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
                        }
                        get has_update_did_output() {
                            return pb_1.Message.getField(this, 3) != null;
                        }
                        get revoke_credentials_output() {
                            return pb_1.Message.getWrapperField(this, RevokeCredentialsOutput, 4);
                        }
                        set revoke_credentials_output(value) {
                            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
                        }
                        get has_revoke_credentials_output() {
                            return pb_1.Message.getField(this, 4) != null;
                        }
                        get protocol_version_update_output() {
                            return pb_1.Message.getWrapperField(this, ProtocolVersionUpdateOutput, 7);
                        }
                        set protocol_version_update_output(value) {
                            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
                        }
                        get has_protocol_version_update_output() {
                            return pb_1.Message.getField(this, 7) != null;
                        }
                        get deactivate_did_output() {
                            return pb_1.Message.getWrapperField(this, DeactivateDIDOutput, 8);
                        }
                        set deactivate_did_output(value) {
                            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
                        }
                        get has_deactivate_did_output() {
                            return pb_1.Message.getField(this, 8) != null;
                        }
                        get operation_id() {
                            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array());
                        }
                        set operation_id(value) {
                            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
                        }
                        get has_operation_id() {
                            return pb_1.Message.getField(this, 5) != null;
                        }
                        get error() {
                            return pb_1.Message.getFieldWithDefault(this, 6, "");
                        }
                        set error(value) {
                            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
                        }
                        get has_error() {
                            return pb_1.Message.getField(this, 6) != null;
                        }
                        get result() {
                            const cases = {
                                0: "none",
                                1: "batch_output",
                                2: "create_did_output",
                                3: "update_did_output",
                                4: "revoke_credentials_output",
                                7: "protocol_version_update_output",
                                8: "deactivate_did_output"
                            };
                            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 7, 8])];
                        }
                        get operation_maybe() {
                            const cases = {
                                0: "none",
                                5: "operation_id",
                                6: "error"
                            };
                            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
                        }
                        static fromObject(data) {
                            const message = new OperationOutput({});
                            if (data.batch_output != null) {
                                message.batch_output = IssueCredentialBatchOutput.fromObject(data.batch_output);
                            }
                            if (data.create_did_output != null) {
                                message.create_did_output = CreateDIDOutput.fromObject(data.create_did_output);
                            }
                            if (data.update_did_output != null) {
                                message.update_did_output = UpdateDIDOutput.fromObject(data.update_did_output);
                            }
                            if (data.revoke_credentials_output != null) {
                                message.revoke_credentials_output = RevokeCredentialsOutput.fromObject(data.revoke_credentials_output);
                            }
                            if (data.protocol_version_update_output != null) {
                                message.protocol_version_update_output = ProtocolVersionUpdateOutput.fromObject(data.protocol_version_update_output);
                            }
                            if (data.deactivate_did_output != null) {
                                message.deactivate_did_output = DeactivateDIDOutput.fromObject(data.deactivate_did_output);
                            }
                            if (data.operation_id != null) {
                                message.operation_id = data.operation_id;
                            }
                            if (data.error != null) {
                                message.error = data.error;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.batch_output != null) {
                                data.batch_output = this.batch_output.toObject();
                            }
                            if (this.create_did_output != null) {
                                data.create_did_output = this.create_did_output.toObject();
                            }
                            if (this.update_did_output != null) {
                                data.update_did_output = this.update_did_output.toObject();
                            }
                            if (this.revoke_credentials_output != null) {
                                data.revoke_credentials_output = this.revoke_credentials_output.toObject();
                            }
                            if (this.protocol_version_update_output != null) {
                                data.protocol_version_update_output = this.protocol_version_update_output.toObject();
                            }
                            if (this.deactivate_did_output != null) {
                                data.deactivate_did_output = this.deactivate_did_output.toObject();
                            }
                            if (this.operation_id != null) {
                                data.operation_id = this.operation_id;
                            }
                            if (this.error != null) {
                                data.error = this.error;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.has_batch_output)
                                writer.writeMessage(1, this.batch_output, () => this.batch_output.serialize(writer));
                            if (this.has_create_did_output)
                                writer.writeMessage(2, this.create_did_output, () => this.create_did_output.serialize(writer));
                            if (this.has_update_did_output)
                                writer.writeMessage(3, this.update_did_output, () => this.update_did_output.serialize(writer));
                            if (this.has_revoke_credentials_output)
                                writer.writeMessage(4, this.revoke_credentials_output, () => this.revoke_credentials_output.serialize(writer));
                            if (this.has_protocol_version_update_output)
                                writer.writeMessage(7, this.protocol_version_update_output, () => this.protocol_version_update_output.serialize(writer));
                            if (this.has_deactivate_did_output)
                                writer.writeMessage(8, this.deactivate_did_output, () => this.deactivate_did_output.serialize(writer));
                            if (this.has_operation_id)
                                writer.writeBytes(5, this.operation_id);
                            if (this.has_error)
                                writer.writeString(6, this.error);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        reader.readMessage(message.batch_output, () => message.batch_output = IssueCredentialBatchOutput.deserialize(reader));
                                        break;
                                    case 2:
                                        reader.readMessage(message.create_did_output, () => message.create_did_output = CreateDIDOutput.deserialize(reader));
                                        break;
                                    case 3:
                                        reader.readMessage(message.update_did_output, () => message.update_did_output = UpdateDIDOutput.deserialize(reader));
                                        break;
                                    case 4:
                                        reader.readMessage(message.revoke_credentials_output, () => message.revoke_credentials_output = RevokeCredentialsOutput.deserialize(reader));
                                        break;
                                    case 7:
                                        reader.readMessage(message.protocol_version_update_output, () => message.protocol_version_update_output = ProtocolVersionUpdateOutput.deserialize(reader));
                                        break;
                                    case 8:
                                        reader.readMessage(message.deactivate_did_output, () => message.deactivate_did_output = DeactivateDIDOutput.deserialize(reader));
                                        break;
                                    case 5:
                                        message.operation_id = reader.readBytes();
                                        break;
                                    case 6:
                                        message.error = reader.readString();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return OperationOutput.deserialize(bytes);
                        }
                    }
                    protos.OperationOutput = OperationOutput;
                    class IssueCredentialBatchOutput extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("batch_id" in data && data.batch_id != undefined) {
                                    this.batch_id = data.batch_id;
                                }
                            }
                        }
                        get batch_id() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set batch_id(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        static fromObject(data) {
                            const message = new IssueCredentialBatchOutput({});
                            if (data.batch_id != null) {
                                message.batch_id = data.batch_id;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.batch_id != null) {
                                data.batch_id = this.batch_id;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.batch_id.length)
                                writer.writeString(1, this.batch_id);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueCredentialBatchOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.batch_id = reader.readString();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return IssueCredentialBatchOutput.deserialize(bytes);
                        }
                    }
                    protos.IssueCredentialBatchOutput = IssueCredentialBatchOutput;
                    class CreateDIDOutput extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("did_suffix" in data && data.did_suffix != undefined) {
                                    this.did_suffix = data.did_suffix;
                                }
                            }
                        }
                        get did_suffix() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set did_suffix(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        static fromObject(data) {
                            const message = new CreateDIDOutput({});
                            if (data.did_suffix != null) {
                                message.did_suffix = data.did_suffix;
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.did_suffix != null) {
                                data.did_suffix = this.did_suffix;
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.did_suffix.length)
                                writer.writeString(1, this.did_suffix);
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDIDOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.did_suffix = reader.readString();
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return CreateDIDOutput.deserialize(bytes);
                        }
                    }
                    protos.CreateDIDOutput = CreateDIDOutput;
                    class UpdateDIDOutput extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") { }
                        }
                        static fromObject(data) {
                            const message = new UpdateDIDOutput({});
                            return message;
                        }
                        toObject() {
                            const data = {};
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDIDOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return UpdateDIDOutput.deserialize(bytes);
                        }
                    }
                    protos.UpdateDIDOutput = UpdateDIDOutput;
                    class RevokeCredentialsOutput extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") { }
                        }
                        static fromObject(data) {
                            const message = new RevokeCredentialsOutput({});
                            return message;
                        }
                        toObject() {
                            const data = {};
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeCredentialsOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return RevokeCredentialsOutput.deserialize(bytes);
                        }
                    }
                    protos.RevokeCredentialsOutput = RevokeCredentialsOutput;
                    class ProtocolVersionUpdateOutput extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") { }
                        }
                        static fromObject(data) {
                            const message = new ProtocolVersionUpdateOutput({});
                            return message;
                        }
                        toObject() {
                            const data = {};
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersionUpdateOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return ProtocolVersionUpdateOutput.deserialize(bytes);
                        }
                    }
                    protos.ProtocolVersionUpdateOutput = ProtocolVersionUpdateOutput;
                    class DeactivateDIDOutput extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") { }
                        }
                        static fromObject(data) {
                            const message = new DeactivateDIDOutput({});
                            return message;
                        }
                        toObject() {
                            const data = {};
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateDIDOutput();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return DeactivateDIDOutput.deserialize(bytes);
                        }
                    }
                    protos.DeactivateDIDOutput = DeactivateDIDOutput;
                    class Service extends pb_1.Message {
                        #one_of_decls = [];
                        constructor(data) {
                            super();
                            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                            if (!Array.isArray(data) && typeof data == "object") {
                                if ("id" in data && data.id != undefined) {
                                    this.id = data.id;
                                }
                                if ("type" in data && data.type != undefined) {
                                    this.type = data.type;
                                }
                                if ("service_endpoint" in data && data.service_endpoint != undefined) {
                                    this.service_endpoint = data.service_endpoint;
                                }
                                if ("added_on" in data && data.added_on != undefined) {
                                    this.added_on = data.added_on;
                                }
                                if ("deleted_on" in data && data.deleted_on != undefined) {
                                    this.deleted_on = data.deleted_on;
                                }
                            }
                        }
                        get id() {
                            return pb_1.Message.getFieldWithDefault(this, 1, "");
                        }
                        set id(value) {
                            pb_1.Message.setField(this, 1, value);
                        }
                        get type() {
                            return pb_1.Message.getFieldWithDefault(this, 2, "");
                        }
                        set type(value) {
                            pb_1.Message.setField(this, 2, value);
                        }
                        get service_endpoint() {
                            return pb_1.Message.getFieldWithDefault(this, 3, []);
                        }
                        set service_endpoint(value) {
                            pb_1.Message.setField(this, 3, value);
                        }
                        get added_on() {
                            return pb_1.Message.getWrapperField(this, LedgerData, 4);
                        }
                        set added_on(value) {
                            pb_1.Message.setWrapperField(this, 4, value);
                        }
                        get has_added_on() {
                            return pb_1.Message.getField(this, 4) != null;
                        }
                        get deleted_on() {
                            return pb_1.Message.getWrapperField(this, LedgerData, 5);
                        }
                        set deleted_on(value) {
                            pb_1.Message.setWrapperField(this, 5, value);
                        }
                        get has_deleted_on() {
                            return pb_1.Message.getField(this, 5) != null;
                        }
                        static fromObject(data) {
                            const message = new Service({});
                            if (data.id != null) {
                                message.id = data.id;
                            }
                            if (data.type != null) {
                                message.type = data.type;
                            }
                            if (data.service_endpoint != null) {
                                message.service_endpoint = data.service_endpoint;
                            }
                            if (data.added_on != null) {
                                message.added_on = LedgerData.fromObject(data.added_on);
                            }
                            if (data.deleted_on != null) {
                                message.deleted_on = LedgerData.fromObject(data.deleted_on);
                            }
                            return message;
                        }
                        toObject() {
                            const data = {};
                            if (this.id != null) {
                                data.id = this.id;
                            }
                            if (this.type != null) {
                                data.type = this.type;
                            }
                            if (this.service_endpoint != null) {
                                data.service_endpoint = this.service_endpoint;
                            }
                            if (this.added_on != null) {
                                data.added_on = this.added_on.toObject();
                            }
                            if (this.deleted_on != null) {
                                data.deleted_on = this.deleted_on.toObject();
                            }
                            return data;
                        }
                        serialize(w) {
                            const writer = w || new pb_1.BinaryWriter();
                            if (this.id.length)
                                writer.writeString(1, this.id);
                            if (this.type.length)
                                writer.writeString(2, this.type);
                            if (this.service_endpoint.length)
                                writer.writeRepeatedString(3, this.service_endpoint);
                            if (this.has_added_on)
                                writer.writeMessage(4, this.added_on, () => this.added_on.serialize(writer));
                            if (this.has_deleted_on)
                                writer.writeMessage(5, this.deleted_on, () => this.deleted_on.serialize(writer));
                            if (!w)
                                return writer.getResultBuffer();
                        }
                        static deserialize(bytes) {
                            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Service();
                            while (reader.nextField()) {
                                if (reader.isEndGroup())
                                    break;
                                switch (reader.getFieldNumber()) {
                                    case 1:
                                        message.id = reader.readString();
                                        break;
                                    case 2:
                                        message.type = reader.readString();
                                        break;
                                    case 3:
                                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                                        break;
                                    case 4:
                                        reader.readMessage(message.added_on, () => message.added_on = LedgerData.deserialize(reader));
                                        break;
                                    case 5:
                                        reader.readMessage(message.deleted_on, () => message.deleted_on = LedgerData.deserialize(reader));
                                        break;
                                    default: reader.skipField();
                                }
                            }
                            return message;
                        }
                        serializeBinary() {
                            return this.serialize();
                        }
                        static deserializeBinary(bytes) {
                            return Service.deserialize(bytes);
                        }
                    }
                    protos.Service = Service;
                })(protos = prism.protos || (prism.protos = {}));
            })(prism = atala.prism || (atala.prism = {}));
        })(atala = iohk.atala || (iohk.atala = {}));
    })(iohk = io.iohk || (io.iohk = {}));
})(io = exports.io || (exports.io = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2RlbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2FzdG9yL3Byb3Rvcy9ub2RlX21vZGVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O29EQUlvRDtBQUNwRCw4REFBZ0Q7QUFDaEQsMEVBQTREO0FBQzVELHNEQUF3QztBQUN4QyxJQUFpQixFQUFFLENBaTNHbEI7QUFqM0dELFdBQWlCLEVBQUU7SUFBQyxJQUFBLElBQUksQ0FpM0d2QjtJQWozR21CLFdBQUEsSUFBSTtRQUFDLElBQUEsS0FBSyxDQWkzRzdCO1FBajNHd0IsV0FBQSxLQUFLO1lBQUMsSUFBQSxLQUFLLENBaTNHbkM7WUFqM0c4QixXQUFBLEtBQUs7Z0JBQUMsSUFBQSxNQUFNLENBaTNHMUM7Z0JBajNHb0MsV0FBQSxNQUFNO29CQUN2QyxJQUFZLFFBU1g7b0JBVEQsV0FBWSxRQUFRO3dCQUNoQixxREFBZSxDQUFBO3dCQUNmLG1EQUFjLENBQUE7d0JBQ2QscURBQWUsQ0FBQTt3QkFDZixpRUFBcUIsQ0FBQTt3QkFDckIsbUVBQXNCLENBQUE7d0JBQ3RCLDJEQUFrQixDQUFBO3dCQUNsQixpRkFBNkIsQ0FBQTt3QkFDN0IsaUZBQTZCLENBQUE7b0JBQ2pDLENBQUMsRUFUVyxRQUFRLEdBQVIsZUFBUSxLQUFSLGVBQVEsUUFTbkI7b0JBQ0QsTUFBYSxhQUFjLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQzNDLGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFJWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSx1QkFBdUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLFNBQVMsRUFBRTtvQ0FDNUUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztpQ0FDM0Q7Z0NBQ0QsSUFBSSwyQkFBMkIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHlCQUF5QixJQUFJLFNBQVMsRUFBRTtvQ0FDcEYsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztpQ0FDbkU7Z0NBQ0QsSUFBSSxpQkFBaUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxTQUFTLEVBQUU7b0NBQ2hFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztpQ0FDL0M7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLHFCQUFxQjs0QkFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFXLENBQUM7d0JBQ2xFLENBQUM7d0JBQ0QsSUFBSSxxQkFBcUIsQ0FBQyxLQUFhOzRCQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUkseUJBQXlCOzRCQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQVcsQ0FBQzt3QkFDbEUsQ0FBQzt3QkFDRCxJQUFJLHlCQUF5QixDQUFDLEtBQWE7NEJBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxlQUFlOzRCQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQTJDLENBQUM7d0JBQ25JLENBQUM7d0JBQ0QsSUFBSSxlQUFlLENBQUMsS0FBNkM7NEJBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ2pELENBQUM7d0JBQ0QsSUFBSSxtQkFBbUI7NEJBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBSWpCOzRCQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN0QyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3BDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUM7NkJBQzlEOzRCQUNELElBQUksSUFBSSxDQUFDLHlCQUF5QixJQUFJLElBQUksRUFBRTtnQ0FDeEMsT0FBTyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQzs2QkFDdEU7NEJBQ0QsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksRUFBRTtnQ0FDOUIsT0FBTyxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzs2QkFDckc7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FJTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxFQUFFO2dDQUNwQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDOzZCQUMzRDs0QkFDRCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3hDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUM7NkJBQ25FOzRCQUNELElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7Z0NBQzlCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDMUQ7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLENBQUM7Z0NBQy9CLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOzRCQUN0RCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsSUFBSSxDQUFDO2dDQUNuQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQzs0QkFDMUQsSUFBSSxJQUFJLENBQUMsbUJBQW1CO2dDQUN4QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQy9GLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs0QkFDeEgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ3BELE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyx5QkFBeUIsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ3hELE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDeEksTUFBTTtvQ0FDVixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzVDLENBQUM7cUJBQ0o7b0JBbkhZLG9CQUFhLGdCQW1IekIsQ0FBQTtvQkFDRCxNQUFhLFNBQVUsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDdkMsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUlYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO2dDQUNqRCxJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLEVBQUU7b0NBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztpQ0FDM0I7Z0NBQ0QsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksU0FBUyxFQUFFO29DQUNwQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7aUNBQ25CO2dDQUNELElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFNBQVMsRUFBRTtvQ0FDcEMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lDQUNuQjs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksS0FBSzs0QkFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLEtBQUssQ0FBQyxLQUFhOzRCQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksQ0FBQzs0QkFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFlLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSxDQUFDLENBQUMsS0FBaUI7NEJBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxDQUFDOzRCQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksVUFBVSxFQUFFLENBQWUsQ0FBQzt3QkFDckYsQ0FBQzt3QkFDRCxJQUFJLENBQUMsQ0FBQyxLQUFpQjs0QkFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBSWpCOzRCQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNsQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dDQUNwQixPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NkJBQzlCOzRCQUNELElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0NBQ2hCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzs2QkFDdEI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtnQ0FDaEIsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDOzZCQUN0Qjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUlOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dDQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NkJBQzNCOzRCQUNELElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0NBQ2hCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzs2QkFDbkI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtnQ0FDaEIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDOzZCQUNuQjs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Z0NBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDdEMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0NBQ2IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNqQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTTtnQ0FDYixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2pDLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQzs0QkFDcEgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUNwQyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3Q0FDL0IsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7d0NBQy9CLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUN4QyxDQUFDO3FCQUNKO29CQWhIWSxnQkFBUyxZQWdIckIsQ0FBQTtvQkFDRCxNQUFhLG1CQUFvQixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUNqRCxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBR1g7NEJBQ0csS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLFNBQVMsRUFBRTtvQ0FDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2lDQUMzQjtnQ0FDRCxJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxTQUFTLEVBQUU7b0NBQzFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztpQ0FDekI7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLEtBQUs7NEJBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFXLENBQUM7d0JBQ25FLENBQUM7d0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBYTs0QkFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLElBQUk7NEJBQ0osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxVQUFVLEVBQUUsQ0FBZSxDQUFDO3dCQUNyRixDQUFDO3dCQUNELElBQUksSUFBSSxDQUFDLEtBQWlCOzRCQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFHakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtnQ0FDcEIsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDOzZCQUM5Qjs0QkFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO2dDQUNuQixPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7NkJBQzVCOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBR04sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0NBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQzs2QkFDM0I7NEJBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtnQ0FDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDOzZCQUN6Qjs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Z0NBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDdEMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07Z0NBQ2hCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFDcEMsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7NEJBQzlILE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQzt3Q0FDcEMsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7d0NBQ2xDLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ2xELENBQUM7cUJBQ0o7b0JBekZZLDBCQUFtQixzQkF5Ri9CLENBQUE7b0JBQ0QsTUFBYSxTQUFVLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ3ZDLGFBQWEsR0FBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3JDLFlBQVksSUFXUjs0QkFDQSxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksU0FBUyxFQUFFO29DQUN0QyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7aUNBQ3JCO2dDQUNELElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLFNBQVMsRUFBRTtvQ0FDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2lDQUMzQjtnQ0FDRCxJQUFJLFVBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUU7b0NBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztpQ0FDakM7Z0NBQ0QsSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFO29DQUN0RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7aUNBQ3JDO2dDQUNELElBQUksYUFBYSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLFNBQVMsRUFBRTtvQ0FDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2lDQUN2QztnQ0FDRCxJQUFJLHdCQUF3QixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsc0JBQXNCLElBQUksU0FBUyxFQUFFO29DQUM5RSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDO2lDQUM3RDs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksRUFBRTs0QkFDRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLEVBQUUsQ0FBQyxLQUFhOzRCQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksS0FBSzs0QkFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFhLENBQUM7d0JBQ3ZGLENBQUM7d0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBZTs0QkFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLFFBQVE7NEJBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBZSxDQUFDO3dCQUMzRSxDQUFDO3dCQUNELElBQUksUUFBUSxDQUFDLEtBQWlCOzRCQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksWUFBWTs0QkFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxVQUFVOzRCQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQWUsQ0FBQzt3QkFDM0UsQ0FBQzt3QkFDRCxJQUFJLFVBQVUsQ0FBQyxLQUFpQjs0QkFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDakQsQ0FBQzt3QkFDRCxJQUFJLGNBQWM7NEJBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUksV0FBVzs0QkFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFjLENBQUM7d0JBQ3pFLENBQUM7d0JBQ0QsSUFBSSxXQUFXLENBQUMsS0FBZ0I7NEJBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksZUFBZTs0QkFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxzQkFBc0I7NEJBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBd0IsQ0FBQzt3QkFDN0YsQ0FBQzt3QkFDRCxJQUFJLHNCQUFzQixDQUFDLEtBQTBCOzRCQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQzt3QkFDRCxJQUFJLDBCQUEwQjs0QkFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUksUUFBUTs0QkFDUixNQUFNLEtBQUssR0FFUDtnQ0FDQSxDQUFDLEVBQUUsTUFBTTtnQ0FDVCxDQUFDLEVBQUUsYUFBYTtnQ0FDaEIsQ0FBQyxFQUFFLHdCQUF3Qjs2QkFDOUIsQ0FBQzs0QkFDRixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzlELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQU9qQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDbEMsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRTtnQ0FDakIsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDOzZCQUN4Qjs0QkFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dDQUNwQixPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NkJBQzlCOzRCQUNELElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0NBQ3ZCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7NkJBQzNEOzRCQUNELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0NBQ3pCLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7NkJBQy9EOzRCQUNELElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0NBQzFCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7NkJBQ2hFOzRCQUNELElBQUksSUFBSSxDQUFDLHNCQUFzQixJQUFJLElBQUksRUFBRTtnQ0FDckMsT0FBTyxDQUFDLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs2QkFDaEc7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FPTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRTtnQ0FDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDOzZCQUNyQjs0QkFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dDQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NkJBQzNCOzRCQUNELElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0NBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDNUM7NEJBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQ0FDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUNoRDs0QkFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dDQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQ2xEOzRCQUNELElBQUksSUFBSSxDQUFDLHNCQUFzQixJQUFJLElBQUksRUFBRTtnQ0FDckMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDeEU7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNO2dDQUNkLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDbkMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxXQUFXO2dDQUNsQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQ3BDLElBQUksSUFBSSxDQUFDLFlBQVk7Z0NBQ2pCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDakYsSUFBSSxJQUFJLENBQUMsY0FBYztnQ0FDbkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUNyRixJQUFJLElBQUksQ0FBQyxlQUFlO2dDQUNwQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3ZGLElBQUksSUFBSSxDQUFDLDBCQUEwQjtnQ0FDL0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDN0csSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDOzRCQUNwSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ2pDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO3dDQUNsQyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQzlGLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDbEcsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUNuRyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQ25JLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUN4QyxDQUFDO3FCQUNKO29CQS9NWSxnQkFBUyxZQStNckIsQ0FBQTtvQkFDRCxNQUFhLE9BQVEsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDckMsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUlYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUNsRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLFNBQVMsRUFBRTtvQ0FDdEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO2lDQUNyQjtnQ0FDRCxJQUFJLGFBQWEsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxTQUFTLEVBQUU7b0NBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztpQ0FDdkM7Z0NBQ0QsSUFBSSxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFO29DQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7aUNBQ2pDOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxFQUFFOzRCQUNGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksRUFBRSxDQUFDLEtBQWE7NEJBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxXQUFXOzRCQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBZ0IsQ0FBQzt3QkFDbkYsQ0FBQzt3QkFDRCxJQUFJLFdBQVcsQ0FBQyxLQUFrQjs0QkFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUN6RCxDQUFDO3dCQUNELElBQUksUUFBUTs0QkFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQWMsQ0FBQzt3QkFDL0UsQ0FBQzt3QkFDRCxJQUFJLFFBQVEsQ0FBQyxLQUFnQjs0QkFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUN6RCxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFJakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ2hDLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0NBQ2pCLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQzs2QkFDeEI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtnQ0FDMUIsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs2QkFDbEY7NEJBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtnQ0FDdkIsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs2QkFDMUU7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FJTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRTtnQ0FDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDOzZCQUNyQjs0QkFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dDQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQzs2QkFDakY7NEJBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtnQ0FDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7NkJBQ3pFOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTTtnQ0FDZCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ25DLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dDQUN2QixNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDbEcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU07Z0NBQ3BCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUM3RixJQUFJLENBQUMsQ0FBQztnQ0FDRixPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQXFDOzRCQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7NEJBQ2xILE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQzt3Q0FDakMsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7d0NBQzVJLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO3dDQUNySSxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDdEMsQ0FBQztxQkFDSjtvQkFoSFksY0FBTyxVQWdIbkIsQ0FBQTtvQkFDRCxNQUFhLGtCQUFtQixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUNoRCxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBRVg7NEJBQ0csS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksVUFBVSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTtvQ0FDbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2lDQUNqQzs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksUUFBUTs0QkFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUF1QyxDQUFDO3dCQUMzSCxDQUFDO3dCQUNELElBQUksUUFBUSxDQUFDLEtBQXlDOzRCQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksWUFBWTs0QkFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUVqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUMzQyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO2dDQUN2QixPQUFPLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzZCQUNuRjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUVOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO2dDQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQzVDOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxZQUFZO2dDQUNqQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ2pGLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDOzRCQUM3SCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUN0SCxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sa0JBQWtCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3FCQUNKO29CQXJFWSx5QkFBa0IscUJBcUU5QixDQUFBO29CQUNELFdBQWlCLGtCQUFrQjt3QkFDL0IsTUFBYSxlQUFnQixTQUFRLElBQUksQ0FBQyxPQUFPOzRCQUM3QyxhQUFhLEdBQWUsRUFBRSxDQUFDOzRCQUMvQixZQUFZLElBR1g7Z0NBQ0csS0FBSyxFQUFFLENBQUM7Z0NBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0NBQ2xHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtvQ0FDakQsSUFBSSxhQUFhLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksU0FBUyxFQUFFO3dDQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7cUNBQ3ZDO29DQUNELElBQUksVUFBVSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTt3Q0FDbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO3FDQUNqQztpQ0FDSjs0QkFDTCxDQUFDOzRCQUNELElBQUksV0FBVztnQ0FDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQWdCLENBQUM7NEJBQ25GLENBQUM7NEJBQ0QsSUFBSSxXQUFXLENBQUMsS0FBa0I7Z0NBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzs0QkFDekQsQ0FBQzs0QkFDRCxJQUFJLFFBQVE7Z0NBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFjLENBQUM7NEJBQy9FLENBQUM7NEJBQ0QsSUFBSSxRQUFRLENBQUMsS0FBZ0I7Z0NBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzs0QkFDekQsQ0FBQzs0QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBR2pCO2dDQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dDQUN4QyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO29DQUMxQixPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lDQUNsRjtnQ0FDRCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO29DQUN2QixPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lDQUMxRTtnQ0FDRCxPQUFPLE9BQU8sQ0FBQzs0QkFDbkIsQ0FBQzs0QkFDRCxRQUFRO2dDQUNKLE1BQU0sSUFBSSxHQUdOLEVBQUUsQ0FBQztnQ0FDUCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO29DQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztpQ0FDakY7Z0NBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtvQ0FDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7aUNBQ3pFO2dDQUNELE9BQU8sSUFBSSxDQUFDOzRCQUNoQixDQUFDOzRCQUdELFNBQVMsQ0FBQyxDQUFxQjtnQ0FDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dDQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTtvQ0FDdkIsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0NBQ2xHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO29DQUNwQixNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQ0FDN0YsSUFBSSxDQUFDLENBQUM7b0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7NEJBQ3hDLENBQUM7NEJBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQztnQ0FDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO2dDQUMxSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO3dDQUNuQixNQUFNO29DQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO3dDQUM3QixLQUFLLENBQUM7NENBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7NENBQzVJLE1BQU07d0NBQ1YsS0FBSyxDQUFDOzRDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDOzRDQUNySSxNQUFNO3dDQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztxQ0FDL0I7aUNBQ0o7Z0NBQ0QsT0FBTyxPQUFPLENBQUM7NEJBQ25CLENBQUM7NEJBQ0QsZUFBZTtnQ0FDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs0QkFDNUIsQ0FBQzs0QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7Z0NBQ3RDLE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDOUMsQ0FBQzt5QkFDSjt3QkF6Rlksa0NBQWUsa0JBeUYzQixDQUFBO29CQUNMLENBQUMsRUEzRmdCLGtCQUFrQixHQUFsQix5QkFBa0IsS0FBbEIseUJBQWtCLFFBMkZsQztvQkFDRCxNQUFhLFlBQWEsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDMUMsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUVYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO2dDQUNqRCxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxTQUFTLEVBQUU7b0NBQ3hDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztpQ0FDdkI7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLEdBQUc7NEJBQ0gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBYyxDQUFDO3dCQUN6RSxDQUFDO3dCQUNELElBQUksR0FBRyxDQUFDLEtBQWdCOzRCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksT0FBTzs0QkFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUVqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDckMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRTtnQ0FDbEIsT0FBTyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs2QkFDaEQ7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FFTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRTtnQ0FDbEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUNsQzs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsT0FBTztnQ0FDWixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3ZFLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs0QkFDdkgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDbkYsTUFBTTtvQ0FDVixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzNDLENBQUM7cUJBQ0o7b0JBckVZLG1CQUFZLGVBcUV4QixDQUFBO29CQUNELE1BQWEsZUFBZ0IsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDN0MsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUVYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO2dDQUNqRCxJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLEVBQUU7b0NBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztpQ0FDM0I7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLEtBQUs7NEJBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFXLENBQUM7d0JBQ25FLENBQUM7d0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBYTs0QkFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBRWpCOzRCQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN4QyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dDQUNwQixPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NkJBQzlCOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBRU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0NBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQzs2QkFDM0I7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO2dDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQ3RDLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQzs0QkFDMUgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUNwQyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDOUMsQ0FBQztxQkFDSjtvQkFsRVksc0JBQWUsa0JBa0UzQixDQUFBO29CQUNELE1BQWEsZ0JBQWlCLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQzlDLGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFFWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxTQUFTLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksU0FBUyxFQUFFO29DQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7aUNBQy9COzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxPQUFPOzRCQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQVksQ0FBQzt3QkFDckUsQ0FBQzt3QkFDRCxJQUFJLE9BQU8sQ0FBQyxLQUFjOzRCQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksV0FBVzs0QkFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUVqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN6QyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dDQUN0QixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOzZCQUN0RDs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUVOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dDQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQzFDOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXO2dDQUNoQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQy9FLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDOzRCQUMzSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUN6RixNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUMvQyxDQUFDO3FCQUNKO29CQXJFWSx1QkFBZ0IsbUJBcUU1QixDQUFBO29CQUNELE1BQWEsbUJBQW9CLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ2pELGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFFWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxXQUFXLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxFQUFFO29DQUNwRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7aUNBQ25DOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxTQUFTOzRCQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksU0FBUyxDQUFDLEtBQWE7NEJBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUVqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO2dDQUN4QixPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7NkJBQ3RDOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBRU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7Z0NBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzs2QkFDbkM7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNO2dDQUNyQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7NEJBQzFDLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDOzRCQUM5SCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ3hDLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ2xELENBQUM7cUJBQ0o7b0JBbEVZLDBCQUFtQixzQkFrRS9CLENBQUE7b0JBQ0QsTUFBYSxtQkFBb0IsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDakQsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUlYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQy9GLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxXQUFXLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxFQUFFO29DQUNwRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7aUNBQ25DO2dDQUNELElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRTtvQ0FDMUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2lDQUN6QjtnQ0FDRCxJQUFJLG1CQUFtQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksU0FBUyxFQUFFO29DQUNwRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO2lDQUNuRDs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksU0FBUzs0QkFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLFNBQVMsQ0FBQyxLQUFhOzRCQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksSUFBSTs0QkFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLElBQUksQ0FBQyxLQUFhOzRCQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksaUJBQWlCOzRCQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQWEsQ0FBQzt3QkFDckUsQ0FBQzt3QkFDRCxJQUFJLGlCQUFpQixDQUFDLEtBQWU7NEJBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUlqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO2dDQUN4QixPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7NkJBQ3RDOzRCQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0NBQ25CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzs2QkFDNUI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxFQUFFO2dDQUNoQyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDOzZCQUN0RDs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUlOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO2dDQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7NkJBQ25DOzRCQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0NBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzs2QkFDekI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxFQUFFO2dDQUNoQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDOzZCQUNuRDs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07Z0NBQ3JCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs0QkFDMUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07Z0NBQ2hCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFDckMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTTtnQ0FDN0IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs0QkFDMUQsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7NEJBQzlILE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQzt3Q0FDeEMsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ25DLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQzt3Q0FDakUsTUFBTTtvQ0FDVixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDbEQsQ0FBQztxQkFDSjtvQkFoSFksMEJBQW1CLHNCQWdIL0IsQ0FBQTtvQkFDRCxNQUFhLGVBQWdCLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQzdDLGFBQWEsR0FBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzlDLFlBQVksSUE4QlI7NEJBQ0EsS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksU0FBUyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsRUFBRTtvQ0FDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2lDQUMvQjtnQ0FDRCxJQUFJLFlBQVksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUU7b0NBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztpQ0FDckM7Z0NBQ0QsSUFBSSxhQUFhLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksU0FBUyxFQUFFO29DQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7aUNBQ3ZDO2dDQUNELElBQUksZ0JBQWdCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksU0FBUyxFQUFFO29DQUM5RCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7aUNBQzdDO2dDQUNELElBQUksZ0JBQWdCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksU0FBUyxFQUFFO29DQUM5RCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7aUNBQzdDOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxPQUFPOzRCQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQWlCLENBQUM7d0JBQy9FLENBQUM7d0JBQ0QsSUFBSSxPQUFPLENBQUMsS0FBbUI7NEJBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksV0FBVzs0QkFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxVQUFVOzRCQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQW9CLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSxVQUFVLENBQUMsS0FBc0I7NEJBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksY0FBYzs0QkFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxXQUFXOzRCQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBcUIsQ0FBQzt3QkFDdkYsQ0FBQzt3QkFDRCxJQUFJLFdBQVcsQ0FBQyxLQUF1Qjs0QkFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzdFLENBQUM7d0JBQ0QsSUFBSSxlQUFlOzRCQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxJQUFJLGNBQWM7NEJBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUF3QixDQUFDO3dCQUM3RixDQUFDO3dCQUNELElBQUksY0FBYyxDQUFDLEtBQTBCOzRCQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQzt3QkFDRCxJQUFJLGtCQUFrQjs0QkFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUksY0FBYzs0QkFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQXdCLENBQUM7d0JBQzdGLENBQUM7d0JBQ0QsSUFBSSxjQUFjLENBQUMsS0FBMEI7NEJBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksa0JBQWtCOzRCQUNsQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxNQUFNOzRCQUNOLE1BQU0sS0FBSyxHQUVQO2dDQUNBLENBQUMsRUFBRSxNQUFNO2dDQUNULENBQUMsRUFBRSxTQUFTO2dDQUNaLENBQUMsRUFBRSxZQUFZO2dDQUNmLENBQUMsRUFBRSxhQUFhO2dDQUNoQixDQUFDLEVBQUUsZ0JBQWdCO2dDQUNuQixDQUFDLEVBQUUsZ0JBQWdCOzZCQUN0QixDQUFDOzRCQUNGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDdkUsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBTWpCOzRCQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN4QyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dDQUN0QixPQUFPLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOzZCQUMzRDs0QkFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFFO2dDQUN6QixPQUFPLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzZCQUNwRTs0QkFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dDQUMxQixPQUFPLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7NkJBQ3ZFOzRCQUNELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0NBQzdCLE9BQU8sQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzs2QkFDaEY7NEJBQ0QsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtnQ0FDN0IsT0FBTyxDQUFDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDOzZCQUNoRjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQU1OLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dDQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQzFDOzRCQUNELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0NBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDaEQ7NEJBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtnQ0FDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUNsRDs0QkFDRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO2dDQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQ3hEOzRCQUNELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0NBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDeEQ7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLFdBQVc7Z0NBQ2hCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDL0UsSUFBSSxJQUFJLENBQUMsY0FBYztnQ0FDbkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUNyRixJQUFJLElBQUksQ0FBQyxlQUFlO2dDQUNwQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3ZGLElBQUksSUFBSSxDQUFDLGtCQUFrQjtnQ0FDdkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUM3RixJQUFJLElBQUksQ0FBQyxrQkFBa0I7Z0NBQ3ZCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDN0YsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDOzRCQUMxSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUM5RixNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQ3ZHLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUMxRyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDbkgsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQ25ILE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUM5QyxDQUFDO3FCQUNKO29CQWxOWSxzQkFBZSxrQkFrTjNCLENBQUE7b0JBQ0QsTUFBYSxrQkFBbUIsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDaEQsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUlYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQy9GLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSx5QkFBeUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLFNBQVMsRUFBRTtvQ0FDaEYsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztpQ0FDL0Q7Z0NBQ0QsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksU0FBUyxFQUFFO29DQUN0QyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7aUNBQ3JCO2dDQUNELElBQUksU0FBUyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsRUFBRTtvQ0FDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2lDQUMvQjs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksdUJBQXVCOzRCQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFlLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSx1QkFBdUIsQ0FBQyxLQUFpQjs0QkFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLEVBQUU7NEJBQ0YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFXLENBQUM7d0JBQ25FLENBQUM7d0JBQ0QsSUFBSSxFQUFFLENBQUMsS0FBYTs0QkFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLE9BQU87NEJBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFzQixDQUFDO3dCQUMvRixDQUFDO3dCQUNELElBQUksT0FBTyxDQUFDLEtBQXdCOzRCQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ3pELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUlqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUMzQyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3RDLE9BQU8sQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUM7NkJBQ2xFOzRCQUNELElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0NBQ2pCLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQzs2QkFDeEI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtnQ0FDdEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs2QkFDaEY7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FJTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxFQUFFO2dDQUN0QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDOzZCQUMvRDs0QkFDRCxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFO2dDQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7NkJBQ3JCOzRCQUNELElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0NBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFxQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQzs2QkFDL0U7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU07Z0NBQ25DLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDOzRCQUN2RCxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTTtnQ0FDZCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ25DLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2dDQUNuQixNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFxQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3BHLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDOzRCQUM3SCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLHVCQUF1QixHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3Q0FDckQsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ2pDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsZUFBZSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO3dDQUNwSixNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sa0JBQWtCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3FCQUNKO29CQWhIWSx5QkFBa0IscUJBZ0g5QixDQUFBO29CQUNELE1BQWEsbUJBQW9CLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ2pELGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFHWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFO29DQUN0RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7aUNBQ3JDO2dDQUNELElBQUksYUFBYSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLFNBQVMsRUFBRTtvQ0FDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2lDQUN2Qzs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksVUFBVTs0QkFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLFVBQVUsQ0FBQyxLQUFhOzRCQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksV0FBVzs0QkFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFlLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSxXQUFXLENBQUMsS0FBaUI7NEJBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUdqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFFO2dDQUN6QixPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7NkJBQ3hDOzRCQUNELElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0NBQzFCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQzs2QkFDMUM7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FHTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQ0FDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDOzZCQUNyQzs0QkFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dDQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7NkJBQ3ZDOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTTtnQ0FDdEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzRCQUMzQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTtnQ0FDdkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOzRCQUMzQyxJQUFJLENBQUMsQ0FBQztnQ0FDRixPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQXFDOzRCQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQzs0QkFDOUgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUN6QyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3Q0FDekMsTUFBTTtvQ0FDVixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDbEQsQ0FBQztxQkFDSjtvQkF6RlksMEJBQW1CLHNCQXlGL0IsQ0FBQTtvQkFDRCxNQUFhLDZCQUE4QixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUMzRCxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBRVg7NEJBQ0csS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksdUJBQXVCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxTQUFTLEVBQUU7b0NBQzVFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUM7aUNBQzNEOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxxQkFBcUI7NEJBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBd0IsQ0FBQzt3QkFDN0YsQ0FBQzt3QkFDRCxJQUFJLHFCQUFxQixDQUFDLEtBQTBCOzRCQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUkseUJBQXlCOzRCQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUVqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLDZCQUE2QixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN0RCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3BDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7NkJBQzlGOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBRU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksRUFBRTtnQ0FDcEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDdEU7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLHlCQUF5QjtnQ0FDOUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDM0csSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLDZCQUE2QixFQUFFLENBQUM7NEJBQ3hJLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQ2pJLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyw2QkFBNkIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzVELENBQUM7cUJBQ0o7b0JBckVZLG9DQUE2QixnQ0FxRXpDLENBQUE7b0JBQ0QsTUFBYSwwQkFBMkIsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDeEQsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUlYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQy9GLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSx5QkFBeUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLFNBQVMsRUFBRTtvQ0FDaEYsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztpQ0FDL0Q7Z0NBQ0QsSUFBSSxxQkFBcUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLG1CQUFtQixJQUFJLFNBQVMsRUFBRTtvQ0FDeEUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztpQ0FDdkQ7Z0NBQ0QsSUFBSSx1QkFBdUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLFNBQVMsRUFBRTtvQ0FDNUUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztpQ0FDM0Q7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLHVCQUF1Qjs0QkFDdkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxVQUFVLEVBQUUsQ0FBZSxDQUFDO3dCQUNyRixDQUFDO3dCQUNELElBQUksdUJBQXVCLENBQUMsS0FBaUI7NEJBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxtQkFBbUI7NEJBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksbUJBQW1CLENBQUMsS0FBYTs0QkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLHFCQUFxQjs0QkFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFpQixDQUFDO3dCQUN6RSxDQUFDO3dCQUNELElBQUkscUJBQXFCLENBQUMsS0FBbUI7NEJBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUlqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuRCxJQUFJLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3RDLE9BQU8sQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUM7NkJBQ2xFOzRCQUNELElBQUksSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksRUFBRTtnQ0FDbEMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQzs2QkFDMUQ7NEJBQ0QsSUFBSSxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxFQUFFO2dDQUNwQyxPQUFPLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDOzZCQUM5RDs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUlOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3RDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUM7NkJBQy9EOzRCQUNELElBQUksSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksRUFBRTtnQ0FDbEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQzs2QkFDdkQ7NEJBQ0QsSUFBSSxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxFQUFFO2dDQUNwQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDOzZCQUMzRDs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTTtnQ0FDbkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7NEJBQ3ZELElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU07Z0NBQy9CLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOzRCQUNwRCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNO2dDQUNqQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOzRCQUM3RCxJQUFJLENBQUMsQ0FBQztnQ0FDRixPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQXFDOzRCQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksMEJBQTBCLEVBQUUsQ0FBQzs0QkFDckksT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyx1QkFBdUIsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7d0NBQ3JELE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ2xELE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzt3Q0FDaEUsTUFBTTtvQ0FDVixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLDBCQUEwQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDekQsQ0FBQztxQkFDSjtvQkFoSFksaUNBQTBCLDZCQWdIdEMsQ0FBQTtvQkFDRCxNQUFhLDhCQUErQixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUM1RCxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBR1g7NEJBQ0csS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksY0FBYyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLFNBQVMsRUFBRTtvQ0FDMUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2lDQUN6QztnQ0FDRCxJQUFJLFNBQVMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxTQUFTLEVBQUU7b0NBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztpQ0FDL0I7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLFlBQVk7NEJBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFXLENBQUM7d0JBQ25FLENBQUM7d0JBQ0QsSUFBSSxZQUFZLENBQUMsS0FBYTs0QkFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLE9BQU87NEJBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUF3QixDQUFDO3dCQUM3RixDQUFDO3dCQUNELElBQUksT0FBTyxDQUFDLEtBQTBCOzRCQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksV0FBVzs0QkFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUdqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN2RCxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO2dDQUMzQixPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7NkJBQzVDOzRCQUNELElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0NBQ3RCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs2QkFDbEU7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FHTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtnQ0FDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDOzZCQUN6Qzs0QkFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dDQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQzFDOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTTtnQ0FDeEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDOzRCQUM3QyxJQUFJLElBQUksQ0FBQyxXQUFXO2dDQUNoQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQy9FLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSw4QkFBOEIsRUFBRSxDQUFDOzRCQUN6SSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQzNDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUNyRyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sOEJBQThCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUM3RCxDQUFDO3FCQUNKO29CQTVGWSxxQ0FBOEIsaUNBNEYxQyxDQUFBO29CQUNELE1BQWEsZUFBZ0IsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDN0MsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUdYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO2dDQUNqRCxJQUFJLGVBQWUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxTQUFTLEVBQUU7b0NBQzVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztpQ0FDM0M7Z0NBQ0QsSUFBSSxlQUFlLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksU0FBUyxFQUFFO29DQUM1RCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7aUNBQzNDOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxhQUFhOzRCQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBVyxDQUFDO3dCQUNsRSxDQUFDO3dCQUNELElBQUksYUFBYSxDQUFDLEtBQWE7NEJBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxhQUFhOzRCQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBVyxDQUFDO3dCQUNsRSxDQUFDO3dCQUNELElBQUksYUFBYSxDQUFDLEtBQWE7NEJBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUdqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDeEMsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtnQ0FDNUIsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDOzZCQUM5Qzs0QkFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxFQUFFO2dDQUM1QixPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7NkJBQzlDOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBR04sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLEVBQUU7Z0NBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQzs2QkFDM0M7NEJBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtnQ0FDNUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDOzZCQUMzQzs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUM7Z0NBQ3ZCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDN0MsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUM7Z0NBQ3ZCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDN0MsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDOzRCQUMxSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7d0NBQzNDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dDQUMzQyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDOUMsQ0FBQztxQkFDSjtvQkF6Rlksc0JBQWUsa0JBeUYzQixDQUFBO29CQUNELE1BQWEsbUJBQW9CLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ2pELGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFJWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxjQUFjLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksU0FBUyxFQUFFO29DQUMxRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7aUNBQ3pDO2dDQUNELElBQUksaUJBQWlCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksU0FBUyxFQUFFO29DQUNoRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7aUNBQy9DO2dDQUNELElBQUksa0JBQWtCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLEVBQUU7b0NBQ2xFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7aUNBQ2pEOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxZQUFZOzRCQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksWUFBWSxDQUFDLEtBQWE7NEJBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxlQUFlOzRCQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBVyxDQUFDO3dCQUNsRSxDQUFDO3dCQUNELElBQUksZUFBZSxDQUFDLEtBQWE7NEJBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxnQkFBZ0I7NEJBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQW9CLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFzQjs0QkFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDakQsQ0FBQzt3QkFDRCxJQUFJLG9CQUFvQjs0QkFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFJakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtnQ0FDM0IsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDOzZCQUM1Qzs0QkFDRCxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxFQUFFO2dDQUM5QixPQUFPLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7NkJBQ2xEOzRCQUNELElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTtnQ0FDL0IsT0FBTyxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7NkJBQ2hGOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBSU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUU7Z0NBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQzs2QkFDekM7NEJBQ0QsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksRUFBRTtnQ0FDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDOzZCQUMvQzs0QkFDRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7Z0NBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQzVEOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTTtnQ0FDeEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDOzRCQUM3QyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQztnQ0FDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzRCQUMvQyxJQUFJLElBQUksQ0FBQyxvQkFBb0I7Z0NBQ3pCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ2pHLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDOzRCQUM5SCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQzNDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dDQUM3QyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUNuSCxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sbUJBQW1CLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNsRCxDQUFDO3FCQUNKO29CQW5IWSwwQkFBbUIsc0JBbUgvQixDQUFBO29CQUNELE1BQWEsc0JBQXVCLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ3BELGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFHWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSx5QkFBeUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLFNBQVMsRUFBRTtvQ0FDaEYsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztpQ0FDL0Q7Z0NBQ0QsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksU0FBUyxFQUFFO29DQUN0QyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7aUNBQ3JCOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSx1QkFBdUI7NEJBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksVUFBVSxFQUFFLENBQWUsQ0FBQzt3QkFDckYsQ0FBQzt3QkFDRCxJQUFJLHVCQUF1QixDQUFDLEtBQWlCOzRCQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksRUFBRTs0QkFDRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLEVBQUUsQ0FBQyxLQUFhOzRCQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFHakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDL0MsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxFQUFFO2dDQUN0QyxPQUFPLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDOzZCQUNsRTs0QkFDRCxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFO2dDQUNqQixPQUFPLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7NkJBQ3hCOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBR04sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksRUFBRTtnQ0FDdEMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQzs2QkFDL0Q7NEJBQ0QsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRTtnQ0FDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDOzZCQUNyQjs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTTtnQ0FDbkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7NEJBQ3ZELElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNO2dDQUNkLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDbkMsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLHNCQUFzQixFQUFFLENBQUM7NEJBQ2pJLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsdUJBQXVCLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dDQUNyRCxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQzt3Q0FDakMsTUFBTTtvQ0FDVixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDckQsQ0FBQztxQkFDSjtvQkF6RlksNkJBQXNCLHlCQXlGbEMsQ0FBQTtvQkFDRCxNQUFhLGNBQWUsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDNUMsYUFBYSxHQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2pELFlBQVksSUEwQ1I7NEJBQ0EsS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRTtvQ0FDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2lDQUNyQztnQ0FDRCxJQUFJLFlBQVksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUU7b0NBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztpQ0FDckM7Z0NBQ0QsSUFBSSx3QkFBd0IsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHNCQUFzQixJQUFJLFNBQVMsRUFBRTtvQ0FDOUUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztpQ0FDN0Q7Z0NBQ0QsSUFBSSxvQkFBb0IsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLFNBQVMsRUFBRTtvQ0FDdEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztpQ0FDckQ7Z0NBQ0QsSUFBSSx5QkFBeUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLFNBQVMsRUFBRTtvQ0FDaEYsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztpQ0FDL0Q7Z0NBQ0QsSUFBSSxnQkFBZ0IsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxTQUFTLEVBQUU7b0NBQzlELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztpQ0FDN0M7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLFVBQVU7NEJBQ1YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUF1QixDQUFDO3dCQUMzRixDQUFDO3dCQUNELElBQUksVUFBVSxDQUFDLEtBQXlCOzRCQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQzt3QkFDRCxJQUFJLGNBQWM7NEJBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUksVUFBVTs0QkFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQXVCLENBQUM7d0JBQzNGLENBQUM7d0JBQ0QsSUFBSSxVQUFVLENBQUMsS0FBeUI7NEJBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksY0FBYzs0QkFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxzQkFBc0I7NEJBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBa0MsQ0FBQzt3QkFDakgsQ0FBQzt3QkFDRCxJQUFJLHNCQUFzQixDQUFDLEtBQW9DOzRCQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQzt3QkFDRCxJQUFJLDBCQUEwQjs0QkFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUksa0JBQWtCOzRCQUNsQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxDQUFDLENBQStCLENBQUM7d0JBQzNHLENBQUM7d0JBQ0QsSUFBSSxrQkFBa0IsQ0FBQyxLQUFpQzs0QkFDcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzdFLENBQUM7d0JBQ0QsSUFBSSxzQkFBc0I7NEJBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxJQUFJLHVCQUF1Qjs0QkFDdkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsOEJBQThCLEVBQUUsQ0FBQyxDQUFtQyxDQUFDO3dCQUNuSCxDQUFDO3dCQUNELElBQUksdUJBQXVCLENBQUMsS0FBcUM7NEJBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksMkJBQTJCOzRCQUMzQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxjQUFjOzRCQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBMkIsQ0FBQzt3QkFDbkcsQ0FBQzt3QkFDRCxJQUFJLGNBQWMsQ0FBQyxLQUE2Qjs0QkFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzdFLENBQUM7d0JBQ0QsSUFBSSxrQkFBa0I7NEJBQ2xCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxJQUFJLFNBQVM7NEJBQ1QsTUFBTSxLQUFLLEdBRVA7Z0NBQ0EsQ0FBQyxFQUFFLE1BQU07Z0NBQ1QsQ0FBQyxFQUFFLFlBQVk7Z0NBQ2YsQ0FBQyxFQUFFLFlBQVk7Z0NBQ2YsQ0FBQyxFQUFFLHdCQUF3QjtnQ0FDM0IsQ0FBQyxFQUFFLG9CQUFvQjtnQ0FDdkIsQ0FBQyxFQUFFLHlCQUF5QjtnQ0FDNUIsQ0FBQyxFQUFFLGdCQUFnQjs2QkFDdEIsQ0FBQzs0QkFDRixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMxRSxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFPakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3ZDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0NBQ3pCLE9BQU8sQ0FBQyxVQUFVLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzs2QkFDdkU7NEJBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQ0FDekIsT0FBTyxDQUFDLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzZCQUN2RTs0QkFDRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLEVBQUU7Z0NBQ3JDLE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyw2QkFBNkIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7NkJBQzFHOzRCQUNELElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksRUFBRTtnQ0FDakMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs2QkFDL0Y7NEJBQ0QsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxFQUFFO2dDQUN0QyxPQUFPLENBQUMsdUJBQXVCLEdBQUcsOEJBQThCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDOzZCQUM3Rzs0QkFDRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO2dDQUM3QixPQUFPLENBQUMsY0FBYyxHQUFHLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7NkJBQ25GOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBT04sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0NBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDaEQ7NEJBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQ0FDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUNoRDs0QkFDRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLEVBQUU7Z0NBQ3JDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQ3hFOzRCQUNELElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksRUFBRTtnQ0FDakMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDaEU7NEJBQ0QsSUFBSSxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxFQUFFO2dDQUN0QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUMxRTs0QkFDRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO2dDQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQ3hEOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxjQUFjO2dDQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3JGLElBQUksSUFBSSxDQUFDLGNBQWM7Z0NBQ25CLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDckYsSUFBSSxJQUFJLENBQUMsMEJBQTBCO2dDQUMvQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUM3RyxJQUFJLElBQUksQ0FBQyxzQkFBc0I7Z0NBQzNCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3JHLElBQUksSUFBSSxDQUFDLDJCQUEyQjtnQ0FDaEMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDL0csSUFBSSxJQUFJLENBQUMsa0JBQWtCO2dDQUN2QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQzdGLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQzs0QkFDekgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUMxRyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDMUcsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLHNCQUFzQixHQUFHLDZCQUE2QixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUM3SSxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsMEJBQTBCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQ2xJLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsR0FBRyw4QkFBOEIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDaEosTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQ3RILE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxjQUFjLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUM3QyxDQUFDO3FCQUNKO29CQXhQWSxxQkFBYyxpQkF3UDFCLENBQUE7b0JBQ0QsTUFBYSxvQkFBcUIsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDbEQsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUlYOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO2dDQUNqRCxJQUFJLGFBQWEsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxTQUFTLEVBQUU7b0NBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztpQ0FDdkM7Z0NBQ0QsSUFBSSxXQUFXLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxFQUFFO29DQUNwRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7aUNBQ25DO2dDQUNELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsRUFBRTtvQ0FDcEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2lDQUNuQzs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksV0FBVzs0QkFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLFdBQVcsQ0FBQyxLQUFhOzRCQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksU0FBUzs0QkFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFlLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSxTQUFTLENBQUMsS0FBaUI7NEJBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxTQUFTOzRCQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQW1CLENBQUM7d0JBQ25GLENBQUM7d0JBQ0QsSUFBSSxTQUFTLENBQUMsS0FBcUI7NEJBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ2pELENBQUM7d0JBQ0QsSUFBSSxhQUFhOzRCQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBSWpCOzRCQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzdDLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0NBQzFCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQzs2QkFDMUM7NEJBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtnQ0FDeEIsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDOzZCQUN0Qzs0QkFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO2dDQUN4QixPQUFPLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzZCQUNqRTs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUlOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dDQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7NkJBQ3ZDOzRCQUNELElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7Z0NBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzs2QkFDbkM7NEJBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtnQ0FDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUM5Qzs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU07Z0NBQ3ZCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07Z0NBQ3JCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs0QkFDekMsSUFBSSxJQUFJLENBQUMsYUFBYTtnQ0FDbEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUNuRixJQUFJLENBQUMsQ0FBQztnQ0FDRixPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQXFDOzRCQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQzs0QkFDL0gsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUMxQyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3Q0FDdkMsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUNwRyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sb0JBQW9CLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNuRCxDQUFDO3FCQUNKO29CQW5IWSwyQkFBb0IsdUJBbUhoQyxDQUFBO29CQUNELE1BQWEsVUFBVyxTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUN4QyxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBSVg7NEJBQ0csS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksZ0JBQWdCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksU0FBUyxFQUFFO29DQUM5RCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7aUNBQzdDO2dDQUNELElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLFNBQVMsRUFBRTtvQ0FDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO2lDQUM3QjtnQ0FDRCxJQUFJLGdCQUFnQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLFNBQVMsRUFBRTtvQ0FDOUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO2lDQUM3Qzs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksY0FBYzs0QkFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLGNBQWMsQ0FBQyxLQUFhOzRCQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksTUFBTTs0QkFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFtRCxDQUFDO3dCQUN0SyxDQUFDO3dCQUNELElBQUksTUFBTSxDQUFDLEtBQXFEOzRCQUM1RCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELElBQUksY0FBYzs0QkFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFrQixDQUFDO3dCQUNqRixDQUFDO3dCQUNELElBQUksY0FBYyxDQUFDLEtBQW9COzRCQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksa0JBQWtCOzRCQUNsQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUlqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDbkMsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtnQ0FDN0IsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDOzZCQUNoRDs0QkFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO2dDQUNyQixPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7NkJBQ2hDOzRCQUNELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0NBQzdCLE9BQU8sQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7NkJBQzFFOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBSU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0NBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQzs2QkFDN0M7NEJBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtnQ0FDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDOzZCQUM3Qjs0QkFDRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO2dDQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQ3hEOzRCQUNELE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTTtnQ0FDMUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDOzRCQUMvQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWM7Z0NBQzVFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs0QkFDckMsSUFBSSxJQUFJLENBQUMsa0JBQWtCO2dDQUN2QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQzdGLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQzs0QkFDckgsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUM3QyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3Q0FDbkMsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUM3RyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDekMsQ0FBQztxQkFDSjtvQkFuSFksaUJBQVUsYUFtSHRCLENBQUE7b0JBQ0QsTUFBYSxlQUFnQixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUM3QyxhQUFhLEdBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDekQsWUFBWSxJQWdEUjs0QkFDQSxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxjQUFjLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksU0FBUyxFQUFFO29DQUMxRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7aUNBQ3pDO2dDQUNELElBQUksbUJBQW1CLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxTQUFTLEVBQUU7b0NBQ3BFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7aUNBQ25EO2dDQUNELElBQUksbUJBQW1CLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxTQUFTLEVBQUU7b0NBQ3BFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7aUNBQ25EO2dDQUNELElBQUksMkJBQTJCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyx5QkFBeUIsSUFBSSxTQUFTLEVBQUU7b0NBQ3BGLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUM7aUNBQ25FO2dDQUNELElBQUksZ0NBQWdDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyw4QkFBOEIsSUFBSSxTQUFTLEVBQUU7b0NBQzlGLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxJQUFJLENBQUMsOEJBQThCLENBQUM7aUNBQzdFO2dDQUNELElBQUksdUJBQXVCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxTQUFTLEVBQUU7b0NBQzVFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUM7aUNBQzNEO2dDQUNELElBQUksY0FBYyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLFNBQVMsRUFBRTtvQ0FDMUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2lDQUN6QztnQ0FDRCxJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLEVBQUU7b0NBQzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztpQ0FDM0I7NkJBQ0o7d0JBQ0wsQ0FBQzt3QkFDRCxJQUFJLFlBQVk7NEJBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxDQUErQixDQUFDO3dCQUMzRyxDQUFDO3dCQUNELElBQUksWUFBWSxDQUFDLEtBQWlDOzRCQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQzt3QkFDRCxJQUFJLGdCQUFnQjs0QkFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUksaUJBQWlCOzRCQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFvQixDQUFDO3dCQUNyRixDQUFDO3dCQUNELElBQUksaUJBQWlCLENBQUMsS0FBc0I7NEJBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUkscUJBQXFCOzRCQUNyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxpQkFBaUI7NEJBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQW9CLENBQUM7d0JBQ3JGLENBQUM7d0JBQ0QsSUFBSSxpQkFBaUIsQ0FBQyxLQUFzQjs0QkFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzdFLENBQUM7d0JBQ0QsSUFBSSxxQkFBcUI7NEJBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxJQUFJLHlCQUF5Qjs0QkFDekIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUE0QixDQUFDO3dCQUNyRyxDQUFDO3dCQUNELElBQUkseUJBQXlCLENBQUMsS0FBOEI7NEJBQ3hELElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUM3RSxDQUFDO3dCQUNELElBQUksNkJBQTZCOzRCQUM3QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSw4QkFBOEI7NEJBQzlCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLENBQUMsQ0FBZ0MsQ0FBQzt3QkFDN0csQ0FBQzt3QkFDRCxJQUFJLDhCQUE4QixDQUFDLEtBQWtDOzRCQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDN0UsQ0FBQzt3QkFDRCxJQUFJLGtDQUFrQzs0QkFDbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELElBQUkscUJBQXFCOzRCQUNyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQXdCLENBQUM7d0JBQzdGLENBQUM7d0JBQ0QsSUFBSSxxQkFBcUIsQ0FBQyxLQUEwQjs0QkFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzdFLENBQUM7d0JBQ0QsSUFBSSx5QkFBeUI7NEJBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxJQUFJLFlBQVk7NEJBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxVQUFVLEVBQUUsQ0FBZSxDQUFDO3dCQUNyRixDQUFDO3dCQUNELElBQUksWUFBWSxDQUFDLEtBQWlCOzRCQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ3RFLENBQUM7d0JBQ0QsSUFBSSxnQkFBZ0I7NEJBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEQsQ0FBQzt3QkFDRCxJQUFJLEtBQUs7NEJBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFXLENBQUM7d0JBQ25FLENBQUM7d0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBYTs0QkFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUN0RSxDQUFDO3dCQUNELElBQUksU0FBUzs0QkFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxNQUFNOzRCQUNOLE1BQU0sS0FBSyxHQUVQO2dDQUNBLENBQUMsRUFBRSxNQUFNO2dDQUNULENBQUMsRUFBRSxjQUFjO2dDQUNqQixDQUFDLEVBQUUsbUJBQW1CO2dDQUN0QixDQUFDLEVBQUUsbUJBQW1CO2dDQUN0QixDQUFDLEVBQUUsMkJBQTJCO2dDQUM5QixDQUFDLEVBQUUsZ0NBQWdDO2dDQUNuQyxDQUFDLEVBQUUsdUJBQXVCOzZCQUM3QixDQUFDOzRCQUNGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzFFLENBQUM7d0JBQ0QsSUFBSSxlQUFlOzRCQUNmLE1BQU0sS0FBSyxHQUVQO2dDQUNBLENBQUMsRUFBRSxNQUFNO2dDQUNULENBQUMsRUFBRSxjQUFjO2dDQUNqQixDQUFDLEVBQUUsT0FBTzs2QkFDYixDQUFDOzRCQUNGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDOUQsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBU2pCOzRCQUNHLE1BQU0sT0FBTyxHQUFHLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUN4QyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO2dDQUMzQixPQUFPLENBQUMsWUFBWSxHQUFHLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7NkJBQ25GOzRCQUNELElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksRUFBRTtnQ0FDaEMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7NkJBQ2xGOzRCQUNELElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksRUFBRTtnQ0FDaEMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7NkJBQ2xGOzRCQUNELElBQUksSUFBSSxDQUFDLHlCQUF5QixJQUFJLElBQUksRUFBRTtnQ0FDeEMsT0FBTyxDQUFDLHlCQUF5QixHQUFHLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQzs2QkFDMUc7NEJBQ0QsSUFBSSxJQUFJLENBQUMsOEJBQThCLElBQUksSUFBSSxFQUFFO2dDQUM3QyxPQUFPLENBQUMsOEJBQThCLEdBQUcsMkJBQTJCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDOzZCQUN4SDs0QkFDRCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3BDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7NkJBQzlGOzRCQUNELElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUU7Z0NBQzNCLE9BQU8sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQzs2QkFDNUM7NEJBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtnQ0FDcEIsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDOzZCQUM5Qjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQVNOLEVBQUUsQ0FBQzs0QkFDUCxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO2dDQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQ3BEOzRCQUNELElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksRUFBRTtnQ0FDaEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDOUQ7NEJBQ0QsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxFQUFFO2dDQUNoQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUM5RDs0QkFDRCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsSUFBSSxJQUFJLEVBQUU7Z0NBQ3hDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLENBQUM7NkJBQzlFOzRCQUNELElBQUksSUFBSSxDQUFDLDhCQUE4QixJQUFJLElBQUksRUFBRTtnQ0FDN0MsSUFBSSxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDeEY7NEJBQ0QsSUFBSSxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxFQUFFO2dDQUNwQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUN0RTs0QkFDRCxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO2dDQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7NkJBQ3pDOzRCQUNELElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0NBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQzs2QkFDM0I7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLGdCQUFnQjtnQ0FDckIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUN6RixJQUFJLElBQUksQ0FBQyxxQkFBcUI7Z0NBQzFCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ25HLElBQUksSUFBSSxDQUFDLHFCQUFxQjtnQ0FDMUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDbkcsSUFBSSxJQUFJLENBQUMsNkJBQTZCO2dDQUNsQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUNuSCxJQUFJLElBQUksQ0FBQyxrQ0FBa0M7Z0NBQ3ZDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQzdILElBQUksSUFBSSxDQUFDLHlCQUF5QjtnQ0FDOUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDM0csSUFBSSxJQUFJLENBQUMsZ0JBQWdCO2dDQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLFNBQVM7Z0NBQ2QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUN0QyxJQUFJLENBQUMsQ0FBQztnQ0FDRixPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQXFDOzRCQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7NEJBQzFILE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRywwQkFBMEIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDdEgsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDckgsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDckgsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLHlCQUF5QixHQUFHLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUM3SSxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEdBQUcsMkJBQTJCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0NBQzNKLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDakksTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7d0NBQzFDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUNwQyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDOUMsQ0FBQztxQkFDSjtvQkExVFksc0JBQWUsa0JBMFQzQixDQUFBO29CQUNELE1BQWEsMEJBQTJCLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ3hELGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFFWDs0QkFDRyxLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFO29DQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7aUNBQ2pDOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxRQUFROzRCQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksUUFBUSxDQUFDLEtBQWE7NEJBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUVqQjs0QkFDRyxNQUFNLE9BQU8sR0FBRyxJQUFJLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuRCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO2dDQUN2QixPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7NkJBQ3BDOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBRU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0NBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzs2QkFDakM7NEJBQ0QsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7NEJBQ3pDLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSwwQkFBMEIsRUFBRSxDQUFDOzRCQUNySSxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ3ZDLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTywwQkFBMEIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3pELENBQUM7cUJBQ0o7b0JBbEVZLGlDQUEwQiw2QkFrRXRDLENBQUE7b0JBQ0QsTUFBYSxlQUFnQixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUM3QyxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBRVg7NEJBQ0csS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7Z0NBQ2pELElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRTtvQ0FDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2lDQUNyQzs2QkFDSjt3QkFDTCxDQUFDO3dCQUNELElBQUksVUFBVTs0QkFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQVcsQ0FBQzt3QkFDbkUsQ0FBQzt3QkFDRCxJQUFJLFVBQVUsQ0FBQyxLQUFhOzRCQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUMxQyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFFakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3hDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0NBQ3pCLE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQzs2QkFDeEM7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FFTixFQUFFLENBQUM7NEJBQ1AsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQ0FDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDOzZCQUNyQzs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07Z0NBQ3RCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzs0QkFDM0MsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDOzRCQUMxSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ3pDLE1BQU07b0NBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyxlQUFlLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUM5QyxDQUFDO3FCQUNKO29CQWxFWSxzQkFBZSxrQkFrRTNCLENBQUE7b0JBQ0QsTUFBYSxlQUFnQixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUM3QyxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBQWlCOzRCQUN6QixLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRSxHQUFHO3dCQUM1RCxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBUTs0QkFDdEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3hDLE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBQU8sRUFBRSxDQUFDOzRCQUNwQixPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDOzRCQUMxSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLGVBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzlDLENBQUM7cUJBQ0o7b0JBdkNZLHNCQUFlLGtCQXVDM0IsQ0FBQTtvQkFDRCxNQUFhLHVCQUF3QixTQUFRLElBQUksQ0FBQyxPQUFPO3dCQUNyRCxhQUFhLEdBQWUsRUFBRSxDQUFDO3dCQUMvQixZQUFZLElBQWlCOzRCQUN6QixLQUFLLEVBQUUsQ0FBQzs0QkFDUixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQzlGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRSxHQUFHO3dCQUM1RCxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBUTs0QkFDdEIsTUFBTSxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDaEQsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsUUFBUTs0QkFDSixNQUFNLElBQUksR0FBTyxFQUFFLENBQUM7NEJBQ3BCLE9BQU8sSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUdELFNBQVMsQ0FBQyxDQUFxQjs0QkFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzRCQUM1QyxJQUFJLENBQUMsQ0FBQztnQ0FDRixPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDeEMsQ0FBQzt3QkFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQXFDOzRCQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQzs0QkFDbEksT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0NBQ3ZCLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtvQ0FDbkIsTUFBTTtnQ0FDVixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRTtvQ0FDN0IsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lDQUMvQjs2QkFDSjs0QkFDRCxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxlQUFlOzRCQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUM1QixDQUFDO3dCQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQjs0QkFDdEMsT0FBTyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3RELENBQUM7cUJBQ0o7b0JBdkNZLDhCQUF1QiwwQkF1Q25DLENBQUE7b0JBQ0QsTUFBYSwyQkFBNEIsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDekQsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQUFpQjs0QkFDekIsS0FBSyxFQUFFLENBQUM7NEJBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzRCQUM5RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUUsR0FBRzt3QkFDNUQsQ0FBQzt3QkFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQVE7NEJBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksMkJBQTJCLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3BELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBQU8sRUFBRSxDQUFDOzRCQUNwQixPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLDJCQUEyQixFQUFFLENBQUM7NEJBQ3RJLE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dDQUN2QixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7b0NBQ25CLE1BQU07Z0NBQ1YsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLEVBQUU7b0NBQzdCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sMkJBQTJCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUMxRCxDQUFDO3FCQUNKO29CQXZDWSxrQ0FBMkIsOEJBdUN2QyxDQUFBO29CQUNELE1BQWEsbUJBQW9CLFNBQVEsSUFBSSxDQUFDLE9BQU87d0JBQ2pELGFBQWEsR0FBZSxFQUFFLENBQUM7d0JBQy9CLFlBQVksSUFBaUI7NEJBQ3pCLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFLEdBQUc7d0JBQzVELENBQUM7d0JBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFROzRCQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUM1QyxPQUFPLE9BQU8sQ0FBQzt3QkFDbkIsQ0FBQzt3QkFDRCxRQUFROzRCQUNKLE1BQU0sSUFBSSxHQUFPLEVBQUUsQ0FBQzs0QkFDcEIsT0FBTyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBR0QsU0FBUyxDQUFDLENBQXFCOzRCQUMzQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7NEJBQzVDLElBQUksQ0FBQyxDQUFDO2dDQUNGLE9BQU8sTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO3dCQUN4QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBcUM7NEJBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDOzRCQUM5SCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUNBQy9COzZCQUNKOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELGVBQWU7NEJBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQzVCLENBQUM7d0JBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWlCOzRCQUN0QyxPQUFPLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDbEQsQ0FBQztxQkFDSjtvQkF2Q1ksMEJBQW1CLHNCQXVDL0IsQ0FBQTtvQkFDRCxNQUFhLE9BQVEsU0FBUSxJQUFJLENBQUMsT0FBTzt3QkFDckMsYUFBYSxHQUFlLEVBQUUsQ0FBQzt3QkFDL0IsWUFBWSxJQU1YOzRCQUNHLEtBQUssRUFBRSxDQUFDOzRCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7NEJBQy9GLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTtnQ0FDakQsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksU0FBUyxFQUFFO29DQUN0QyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7aUNBQ3JCO2dDQUNELElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRTtvQ0FDMUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2lDQUN6QjtnQ0FDRCxJQUFJLGtCQUFrQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksU0FBUyxFQUFFO29DQUNsRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2lDQUNqRDtnQ0FDRCxJQUFJLFVBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUU7b0NBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztpQ0FDakM7Z0NBQ0QsSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFO29DQUN0RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7aUNBQ3JDOzZCQUNKO3dCQUNMLENBQUM7d0JBQ0QsSUFBSSxFQUFFOzRCQUNGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksRUFBRSxDQUFDLEtBQWE7NEJBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxJQUFJOzRCQUNKLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFDO3dCQUNuRSxDQUFDO3dCQUNELElBQUksSUFBSSxDQUFDLEtBQWE7NEJBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsSUFBSSxnQkFBZ0I7NEJBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBYSxDQUFDO3dCQUNyRSxDQUFDO3dCQUNELElBQUksZ0JBQWdCLENBQUMsS0FBZTs0QkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxJQUFJLFFBQVE7NEJBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBZSxDQUFDO3dCQUMzRSxDQUFDO3dCQUNELElBQUksUUFBUSxDQUFDLEtBQWlCOzRCQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNqRCxDQUFDO3dCQUNELElBQUksWUFBWTs0QkFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7d0JBQ2xELENBQUM7d0JBQ0QsSUFBSSxVQUFVOzRCQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQWUsQ0FBQzt3QkFDM0UsQ0FBQzt3QkFDRCxJQUFJLFVBQVUsQ0FBQyxLQUFpQjs0QkFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDakQsQ0FBQzt3QkFDRCxJQUFJLGNBQWM7NEJBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO3dCQUNsRCxDQUFDO3dCQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFNakI7NEJBQ0csTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ2hDLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0NBQ2pCLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQzs2QkFDeEI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtnQ0FDbkIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDOzZCQUM1Qjs0QkFDRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7Z0NBQy9CLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7NkJBQ3BEOzRCQUNELElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0NBQ3ZCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7NkJBQzNEOzRCQUNELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Z0NBQ3pCLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7NkJBQy9EOzRCQUNELE9BQU8sT0FBTyxDQUFDO3dCQUNuQixDQUFDO3dCQUNELFFBQVE7NEJBQ0osTUFBTSxJQUFJLEdBTU4sRUFBRSxDQUFDOzRCQUNQLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0NBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQzs2QkFDckI7NEJBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtnQ0FDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDOzZCQUN6Qjs0QkFDRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7Z0NBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7NkJBQ2pEOzRCQUNELElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0NBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs2QkFDNUM7NEJBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQ0FDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDOzZCQUNoRDs0QkFDRCxPQUFPLElBQUksQ0FBQzt3QkFDaEIsQ0FBQzt3QkFHRCxTQUFTLENBQUMsQ0FBcUI7NEJBQzNCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDNUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU07Z0NBQ2QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtnQ0FDaEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNyQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNO2dDQUM1QixNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOzRCQUN6RCxJQUFJLElBQUksQ0FBQyxZQUFZO2dDQUNqQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ2pGLElBQUksSUFBSSxDQUFDLGNBQWM7Z0NBQ25CLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDckYsSUFBSSxDQUFDLENBQUM7Z0NBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7d0JBQ3hDLENBQUM7d0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFxQzs0QkFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDOzRCQUNsSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQ0FDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO29DQUNuQixNQUFNO2dDQUNWLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFO29DQUM3QixLQUFLLENBQUM7d0NBQ0YsT0FBTyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7d0NBQ2pDLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO3dDQUNuQyxNQUFNO29DQUNWLEtBQUssQ0FBQzt3Q0FDRixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7d0NBQ2pFLE1BQU07b0NBQ1YsS0FBSyxDQUFDO3dDQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3Q0FDOUYsTUFBTTtvQ0FDVixLQUFLLENBQUM7d0NBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dDQUNsRyxNQUFNO29DQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQ0FDL0I7NkJBQ0o7NEJBQ0QsT0FBTyxPQUFPLENBQUM7d0JBQ25CLENBQUM7d0JBQ0QsZUFBZTs0QkFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDNUIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBaUI7NEJBQ3RDLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDdEMsQ0FBQztxQkFDSjtvQkFwS1ksY0FBTyxVQW9LbkIsQ0FBQTtnQkFDTCxDQUFDLEVBajNHb0MsTUFBTSxHQUFOLFlBQU0sS0FBTixZQUFNLFFBaTNHMUM7WUFBRCxDQUFDLEVBajNHOEIsS0FBSyxHQUFMLFdBQUssS0FBTCxXQUFLLFFBaTNHbkM7UUFBRCxDQUFDLEVBajNHd0IsS0FBSyxHQUFMLFVBQUssS0FBTCxVQUFLLFFBaTNHN0I7SUFBRCxDQUFDLEVBajNHbUIsSUFBSSxHQUFKLE9BQUksS0FBSixPQUFJLFFBaTNHdkI7QUFBRCxDQUFDLEVBajNHZ0IsRUFBRSxHQUFGLFVBQUUsS0FBRixVQUFFLFFBaTNHbEIifQ==