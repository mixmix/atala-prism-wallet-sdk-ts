/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: node_models.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common_models.js";
import * as dependency_2 from "./google/protobuf/timestamp.js";
import * as pb_1 from "google-protobuf";
export namespace io.iohk.atala.prism.protos {
    export enum KeyUsage {
        UNKNOWN_KEY = 0,
        MASTER_KEY = 1,
        ISSUING_KEY = 2,
        KEY_AGREEMENT_KEY = 3,
        AUTHENTICATION_KEY = 4,
        REVOCATION_KEY = 5,
        CAPABILITY_INVOCATION_KEY = 6,
        CAPABILITY_DELEGATION_KEY = 7
    }
    export class TimestampInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_sequence_number?: number;
            operation_sequence_number?: number;
            block_timestamp?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_sequence_number" in data && data.block_sequence_number != undefined) {
                    this.block_sequence_number = data.block_sequence_number;
                }
                if ("operation_sequence_number" in data && data.operation_sequence_number != undefined) {
                    this.operation_sequence_number = data.operation_sequence_number;
                }
                if ("block_timestamp" in data && data.block_timestamp != undefined) {
                    this.block_timestamp = data.block_timestamp;
                }
            }
        }
        get block_sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set block_sequence_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set operation_sequence_number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set block_timestamp(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_block_timestamp() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            block_sequence_number?: number;
            operation_sequence_number?: number;
            block_timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): TimestampInfo {
            const message = new TimestampInfo({});
            if (data.block_sequence_number != null) {
                message.block_sequence_number = data.block_sequence_number;
            }
            if (data.operation_sequence_number != null) {
                message.operation_sequence_number = data.operation_sequence_number;
            }
            if (data.block_timestamp != null) {
                message.block_timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.block_timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                block_sequence_number?: number;
                operation_sequence_number?: number;
                block_timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.block_sequence_number != null) {
                data.block_sequence_number = this.block_sequence_number;
            }
            if (this.operation_sequence_number != null) {
                data.operation_sequence_number = this.operation_sequence_number;
            }
            if (this.block_timestamp != null) {
                data.block_timestamp = this.block_timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_sequence_number != 0)
                writer.writeUint32(2, this.block_sequence_number);
            if (this.operation_sequence_number != 0)
                writer.writeUint32(3, this.operation_sequence_number);
            if (this.has_block_timestamp)
                writer.writeMessage(4, this.block_timestamp, () => this.block_timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimestampInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimestampInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.block_sequence_number = reader.readUint32();
                        break;
                    case 3:
                        message.operation_sequence_number = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.block_timestamp, () => message.block_timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimestampInfo {
            return TimestampInfo.deserialize(bytes);
        }
    }
    export class ECKeyData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            curve?: string;
            x?: Uint8Array;
            y?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("curve" in data && data.curve != undefined) {
                    this.curve = data.curve;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get curve() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set curve(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set x(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
        }
        set y(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            curve?: string;
            x?: Uint8Array;
            y?: Uint8Array;
        }): ECKeyData {
            const message = new ECKeyData({});
            if (data.curve != null) {
                message.curve = data.curve;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                curve?: string;
                x?: Uint8Array;
                y?: Uint8Array;
            } = {};
            if (this.curve != null) {
                data.curve = this.curve;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.curve.length)
                writer.writeString(1, this.curve);
            if (this.x.length)
                writer.writeBytes(2, this.x);
            if (this.y.length)
                writer.writeBytes(3, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ECKeyData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ECKeyData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.curve = reader.readString();
                        break;
                    case 2:
                        message.x = reader.readBytes();
                        break;
                    case 3:
                        message.y = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ECKeyData {
            return ECKeyData.deserialize(bytes);
        }
    }
    export class CompressedECKeyData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            curve?: string;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("curve" in data && data.curve != undefined) {
                    this.curve = data.curve;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get curve() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set curve(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            curve?: string;
            data?: Uint8Array;
        }): CompressedECKeyData {
            const message = new CompressedECKeyData({});
            if (data.curve != null) {
                message.curve = data.curve;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                curve?: string;
                data?: Uint8Array;
            } = {};
            if (this.curve != null) {
                data.curve = this.curve;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.curve.length)
                writer.writeString(1, this.curve);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompressedECKeyData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompressedECKeyData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.curve = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompressedECKeyData {
            return CompressedECKeyData.deserialize(bytes);
        }
    }
    export class PublicKey extends pb_1.Message {
        #one_of_decls: number[][] = [[8, 9]];
        constructor(data?: any[] | ({
            id?: string;
            usage?: KeyUsage;
            added_on?: LedgerData;
            revoked_on?: LedgerData;
        } & (({
            ec_key_data?: ECKeyData;
            compressed_ec_key_data?: never;
        } | {
            ec_key_data?: never;
            compressed_ec_key_data?: CompressedECKeyData;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("added_on" in data && data.added_on != undefined) {
                    this.added_on = data.added_on;
                }
                if ("revoked_on" in data && data.revoked_on != undefined) {
                    this.revoked_on = data.revoked_on;
                }
                if ("ec_key_data" in data && data.ec_key_data != undefined) {
                    this.ec_key_data = data.ec_key_data;
                }
                if ("compressed_ec_key_data" in data && data.compressed_ec_key_data != undefined) {
                    this.compressed_ec_key_data = data.compressed_ec_key_data;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 2, KeyUsage.UNKNOWN_KEY) as KeyUsage;
        }
        set usage(value: KeyUsage) {
            pb_1.Message.setField(this, 2, value);
        }
        get added_on() {
            return pb_1.Message.getWrapperField(this, LedgerData, 5) as LedgerData;
        }
        set added_on(value: LedgerData) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_added_on() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get revoked_on() {
            return pb_1.Message.getWrapperField(this, LedgerData, 6) as LedgerData;
        }
        set revoked_on(value: LedgerData) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_revoked_on() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ec_key_data() {
            return pb_1.Message.getWrapperField(this, ECKeyData, 8) as ECKeyData;
        }
        set ec_key_data(value: ECKeyData) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_ec_key_data() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get compressed_ec_key_data() {
            return pb_1.Message.getWrapperField(this, CompressedECKeyData, 9) as CompressedECKeyData;
        }
        set compressed_ec_key_data(value: CompressedECKeyData) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_compressed_ec_key_data() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get key_data() {
            const cases: {
                [index: number]: "none" | "ec_key_data" | "compressed_ec_key_data";
            } = {
                0: "none",
                8: "ec_key_data",
                9: "compressed_ec_key_data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8, 9])];
        }
        static fromObject(data: {
            id?: string;
            usage?: KeyUsage;
            added_on?: ReturnType<typeof LedgerData.prototype.toObject>;
            revoked_on?: ReturnType<typeof LedgerData.prototype.toObject>;
            ec_key_data?: ReturnType<typeof ECKeyData.prototype.toObject>;
            compressed_ec_key_data?: ReturnType<typeof CompressedECKeyData.prototype.toObject>;
        }): PublicKey {
            const message = new PublicKey({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.added_on != null) {
                message.added_on = LedgerData.fromObject(data.added_on);
            }
            if (data.revoked_on != null) {
                message.revoked_on = LedgerData.fromObject(data.revoked_on);
            }
            if (data.ec_key_data != null) {
                message.ec_key_data = ECKeyData.fromObject(data.ec_key_data);
            }
            if (data.compressed_ec_key_data != null) {
                message.compressed_ec_key_data = CompressedECKeyData.fromObject(data.compressed_ec_key_data);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                usage?: KeyUsage;
                added_on?: ReturnType<typeof LedgerData.prototype.toObject>;
                revoked_on?: ReturnType<typeof LedgerData.prototype.toObject>;
                ec_key_data?: ReturnType<typeof ECKeyData.prototype.toObject>;
                compressed_ec_key_data?: ReturnType<typeof CompressedECKeyData.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.added_on != null) {
                data.added_on = this.added_on.toObject();
            }
            if (this.revoked_on != null) {
                data.revoked_on = this.revoked_on.toObject();
            }
            if (this.ec_key_data != null) {
                data.ec_key_data = this.ec_key_data.toObject();
            }
            if (this.compressed_ec_key_data != null) {
                data.compressed_ec_key_data = this.compressed_ec_key_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.usage != KeyUsage.UNKNOWN_KEY)
                writer.writeEnum(2, this.usage);
            if (this.has_added_on)
                writer.writeMessage(5, this.added_on, () => this.added_on.serialize(writer));
            if (this.has_revoked_on)
                writer.writeMessage(6, this.revoked_on, () => this.revoked_on.serialize(writer));
            if (this.has_ec_key_data)
                writer.writeMessage(8, this.ec_key_data, () => this.ec_key_data.serialize(writer));
            if (this.has_compressed_ec_key_data)
                writer.writeMessage(9, this.compressed_ec_key_data, () => this.compressed_ec_key_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.usage = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.added_on, () => message.added_on = LedgerData.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.revoked_on, () => message.revoked_on = LedgerData.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.ec_key_data, () => message.ec_key_data = ECKeyData.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.compressed_ec_key_data, () => message.compressed_ec_key_data = CompressedECKeyData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicKey {
            return PublicKey.deserialize(bytes);
        }
    }
    export class DIDData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            public_keys?: PublicKey[];
            services?: Service[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("public_keys" in data && data.public_keys != undefined) {
                    this.public_keys = data.public_keys;
                }
                if ("services" in data && data.services != undefined) {
                    this.services = data.services;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get public_keys() {
            return pb_1.Message.getRepeatedWrapperField(this, PublicKey, 2) as PublicKey[];
        }
        set public_keys(value: PublicKey[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get services() {
            return pb_1.Message.getRepeatedWrapperField(this, Service, 3) as Service[];
        }
        set services(value: Service[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            public_keys?: ReturnType<typeof PublicKey.prototype.toObject>[];
            services?: ReturnType<typeof Service.prototype.toObject>[];
        }): DIDData {
            const message = new DIDData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.public_keys != null) {
                message.public_keys = data.public_keys.map(item => PublicKey.fromObject(item));
            }
            if (data.services != null) {
                message.services = data.services.map(item => Service.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                public_keys?: ReturnType<typeof PublicKey.prototype.toObject>[];
                services?: ReturnType<typeof Service.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.public_keys != null) {
                data.public_keys = this.public_keys.map((item: PublicKey) => item.toObject());
            }
            if (this.services != null) {
                data.services = this.services.map((item: Service) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.public_keys.length)
                writer.writeRepeatedMessage(2, this.public_keys, (item: PublicKey) => item.serialize(writer));
            if (this.services.length)
                writer.writeRepeatedMessage(3, this.services, (item: Service) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DIDData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DIDData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.public_keys, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PublicKey.deserialize(reader), PublicKey));
                        break;
                    case 3:
                        reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Service.deserialize(reader), Service));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DIDData {
            return DIDData.deserialize(bytes);
        }
    }
    export class CreateDIDOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did_data?: CreateDIDOperation.DIDCreationData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did_data" in data && data.did_data != undefined) {
                    this.did_data = data.did_data;
                }
            }
        }
        get did_data() {
            return pb_1.Message.getWrapperField(this, CreateDIDOperation.DIDCreationData, 1) as CreateDIDOperation.DIDCreationData;
        }
        set did_data(value: CreateDIDOperation.DIDCreationData) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_did_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            did_data?: ReturnType<typeof CreateDIDOperation.DIDCreationData.prototype.toObject>;
        }): CreateDIDOperation {
            const message = new CreateDIDOperation({});
            if (data.did_data != null) {
                message.did_data = CreateDIDOperation.DIDCreationData.fromObject(data.did_data);
            }
            return message;
        }
        toObject() {
            const data: {
                did_data?: ReturnType<typeof CreateDIDOperation.DIDCreationData.prototype.toObject>;
            } = {};
            if (this.did_data != null) {
                data.did_data = this.did_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_did_data)
                writer.writeMessage(1, this.did_data, () => this.did_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDIDOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDIDOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.did_data, () => message.did_data = CreateDIDOperation.DIDCreationData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateDIDOperation {
            return CreateDIDOperation.deserialize(bytes);
        }
    }
    export namespace CreateDIDOperation {
        export class DIDCreationData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                public_keys?: PublicKey[];
                services?: Service[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("public_keys" in data && data.public_keys != undefined) {
                        this.public_keys = data.public_keys;
                    }
                    if ("services" in data && data.services != undefined) {
                        this.services = data.services;
                    }
                }
            }
            get public_keys() {
                return pb_1.Message.getRepeatedWrapperField(this, PublicKey, 2) as PublicKey[];
            }
            set public_keys(value: PublicKey[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get services() {
                return pb_1.Message.getRepeatedWrapperField(this, Service, 3) as Service[];
            }
            set services(value: Service[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                public_keys?: ReturnType<typeof PublicKey.prototype.toObject>[];
                services?: ReturnType<typeof Service.prototype.toObject>[];
            }): DIDCreationData {
                const message = new DIDCreationData({});
                if (data.public_keys != null) {
                    message.public_keys = data.public_keys.map(item => PublicKey.fromObject(item));
                }
                if (data.services != null) {
                    message.services = data.services.map(item => Service.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    public_keys?: ReturnType<typeof PublicKey.prototype.toObject>[];
                    services?: ReturnType<typeof Service.prototype.toObject>[];
                } = {};
                if (this.public_keys != null) {
                    data.public_keys = this.public_keys.map((item: PublicKey) => item.toObject());
                }
                if (this.services != null) {
                    data.services = this.services.map((item: Service) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.public_keys.length)
                    writer.writeRepeatedMessage(2, this.public_keys, (item: PublicKey) => item.serialize(writer));
                if (this.services.length)
                    writer.writeRepeatedMessage(3, this.services, (item: Service) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DIDCreationData {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DIDCreationData();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 2:
                            reader.readMessage(message.public_keys, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PublicKey.deserialize(reader), PublicKey));
                            break;
                        case 3:
                            reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Service.deserialize(reader), Service));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DIDCreationData {
                return DIDCreationData.deserialize(bytes);
            }
        }
    }
    export class AddKeyAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: PublicKey;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, PublicKey, 1) as PublicKey;
        }
        set key(value: PublicKey) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof PublicKey.prototype.toObject>;
        }): AddKeyAction {
            const message = new AddKeyAction({});
            if (data.key != null) {
                message.key = PublicKey.fromObject(data.key);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof PublicKey.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddKeyAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddKeyAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = PublicKey.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddKeyAction {
            return AddKeyAction.deserialize(bytes);
        }
    }
    export class RemoveKeyAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keyId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keyId" in data && data.keyId != undefined) {
                    this.keyId = data.keyId;
                }
            }
        }
        get keyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set keyId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            keyId?: string;
        }): RemoveKeyAction {
            const message = new RemoveKeyAction({});
            if (data.keyId != null) {
                message.keyId = data.keyId;
            }
            return message;
        }
        toObject() {
            const data: {
                keyId?: string;
            } = {};
            if (this.keyId != null) {
                data.keyId = this.keyId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keyId.length)
                writer.writeString(1, this.keyId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveKeyAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveKeyAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.keyId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveKeyAction {
            return RemoveKeyAction.deserialize(bytes);
        }
    }
    export class AddServiceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: Service;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get service() {
            return pb_1.Message.getWrapperField(this, Service, 1) as Service;
        }
        set service(value: Service) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service?: ReturnType<typeof Service.prototype.toObject>;
        }): AddServiceAction {
            const message = new AddServiceAction({});
            if (data.service != null) {
                message.service = Service.fromObject(data.service);
            }
            return message;
        }
        toObject() {
            const data: {
                service?: ReturnType<typeof Service.prototype.toObject>;
            } = {};
            if (this.service != null) {
                data.service = this.service.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service)
                writer.writeMessage(1, this.service, () => this.service.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddServiceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddServiceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service, () => message.service = Service.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddServiceAction {
            return AddServiceAction.deserialize(bytes);
        }
    }
    export class RemoveServiceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            serviceId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serviceId" in data && data.serviceId != undefined) {
                    this.serviceId = data.serviceId;
                }
            }
        }
        get serviceId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set serviceId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            serviceId?: string;
        }): RemoveServiceAction {
            const message = new RemoveServiceAction({});
            if (data.serviceId != null) {
                message.serviceId = data.serviceId;
            }
            return message;
        }
        toObject() {
            const data: {
                serviceId?: string;
            } = {};
            if (this.serviceId != null) {
                data.serviceId = this.serviceId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serviceId.length)
                writer.writeString(1, this.serviceId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveServiceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveServiceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serviceId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveServiceAction {
            return RemoveServiceAction.deserialize(bytes);
        }
    }
    export class UpdateServiceAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            serviceId?: string;
            type?: string;
            service_endpoints?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serviceId" in data && data.serviceId != undefined) {
                    this.serviceId = data.serviceId;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("service_endpoints" in data && data.service_endpoints != undefined) {
                    this.service_endpoints = data.service_endpoints;
                }
            }
        }
        get serviceId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set serviceId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service_endpoints() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set service_endpoints(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            serviceId?: string;
            type?: string;
            service_endpoints?: string[];
        }): UpdateServiceAction {
            const message = new UpdateServiceAction({});
            if (data.serviceId != null) {
                message.serviceId = data.serviceId;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.service_endpoints != null) {
                message.service_endpoints = data.service_endpoints;
            }
            return message;
        }
        toObject() {
            const data: {
                serviceId?: string;
                type?: string;
                service_endpoints?: string[];
            } = {};
            if (this.serviceId != null) {
                data.serviceId = this.serviceId;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.service_endpoints != null) {
                data.service_endpoints = this.service_endpoints;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serviceId.length)
                writer.writeString(1, this.serviceId);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.service_endpoints.length)
                writer.writeRepeatedString(3, this.service_endpoints);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateServiceAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateServiceAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.serviceId = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateServiceAction {
            return UpdateServiceAction.deserialize(bytes);
        }
    }
    export class UpdateDIDAction extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            add_key?: AddKeyAction;
            remove_key?: never;
            add_service?: never;
            remove_service?: never;
            update_service?: never;
        } | {
            add_key?: never;
            remove_key?: RemoveKeyAction;
            add_service?: never;
            remove_service?: never;
            update_service?: never;
        } | {
            add_key?: never;
            remove_key?: never;
            add_service?: AddServiceAction;
            remove_service?: never;
            update_service?: never;
        } | {
            add_key?: never;
            remove_key?: never;
            add_service?: never;
            remove_service?: RemoveServiceAction;
            update_service?: never;
        } | {
            add_key?: never;
            remove_key?: never;
            add_service?: never;
            remove_service?: never;
            update_service?: UpdateServiceAction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("add_key" in data && data.add_key != undefined) {
                    this.add_key = data.add_key;
                }
                if ("remove_key" in data && data.remove_key != undefined) {
                    this.remove_key = data.remove_key;
                }
                if ("add_service" in data && data.add_service != undefined) {
                    this.add_service = data.add_service;
                }
                if ("remove_service" in data && data.remove_service != undefined) {
                    this.remove_service = data.remove_service;
                }
                if ("update_service" in data && data.update_service != undefined) {
                    this.update_service = data.update_service;
                }
            }
        }
        get add_key() {
            return pb_1.Message.getWrapperField(this, AddKeyAction, 1) as AddKeyAction;
        }
        set add_key(value: AddKeyAction) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_add_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get remove_key() {
            return pb_1.Message.getWrapperField(this, RemoveKeyAction, 2) as RemoveKeyAction;
        }
        set remove_key(value: RemoveKeyAction) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_remove_key() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get add_service() {
            return pb_1.Message.getWrapperField(this, AddServiceAction, 3) as AddServiceAction;
        }
        set add_service(value: AddServiceAction) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_add_service() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get remove_service() {
            return pb_1.Message.getWrapperField(this, RemoveServiceAction, 4) as RemoveServiceAction;
        }
        set remove_service(value: RemoveServiceAction) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_remove_service() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get update_service() {
            return pb_1.Message.getWrapperField(this, UpdateServiceAction, 5) as UpdateServiceAction;
        }
        set update_service(value: UpdateServiceAction) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_update_service() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get action() {
            const cases: {
                [index: number]: "none" | "add_key" | "remove_key" | "add_service" | "remove_service" | "update_service";
            } = {
                0: "none",
                1: "add_key",
                2: "remove_key",
                3: "add_service",
                4: "remove_service",
                5: "update_service"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            add_key?: ReturnType<typeof AddKeyAction.prototype.toObject>;
            remove_key?: ReturnType<typeof RemoveKeyAction.prototype.toObject>;
            add_service?: ReturnType<typeof AddServiceAction.prototype.toObject>;
            remove_service?: ReturnType<typeof RemoveServiceAction.prototype.toObject>;
            update_service?: ReturnType<typeof UpdateServiceAction.prototype.toObject>;
        }): UpdateDIDAction {
            const message = new UpdateDIDAction({});
            if (data.add_key != null) {
                message.add_key = AddKeyAction.fromObject(data.add_key);
            }
            if (data.remove_key != null) {
                message.remove_key = RemoveKeyAction.fromObject(data.remove_key);
            }
            if (data.add_service != null) {
                message.add_service = AddServiceAction.fromObject(data.add_service);
            }
            if (data.remove_service != null) {
                message.remove_service = RemoveServiceAction.fromObject(data.remove_service);
            }
            if (data.update_service != null) {
                message.update_service = UpdateServiceAction.fromObject(data.update_service);
            }
            return message;
        }
        toObject() {
            const data: {
                add_key?: ReturnType<typeof AddKeyAction.prototype.toObject>;
                remove_key?: ReturnType<typeof RemoveKeyAction.prototype.toObject>;
                add_service?: ReturnType<typeof AddServiceAction.prototype.toObject>;
                remove_service?: ReturnType<typeof RemoveServiceAction.prototype.toObject>;
                update_service?: ReturnType<typeof UpdateServiceAction.prototype.toObject>;
            } = {};
            if (this.add_key != null) {
                data.add_key = this.add_key.toObject();
            }
            if (this.remove_key != null) {
                data.remove_key = this.remove_key.toObject();
            }
            if (this.add_service != null) {
                data.add_service = this.add_service.toObject();
            }
            if (this.remove_service != null) {
                data.remove_service = this.remove_service.toObject();
            }
            if (this.update_service != null) {
                data.update_service = this.update_service.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_add_key)
                writer.writeMessage(1, this.add_key, () => this.add_key.serialize(writer));
            if (this.has_remove_key)
                writer.writeMessage(2, this.remove_key, () => this.remove_key.serialize(writer));
            if (this.has_add_service)
                writer.writeMessage(3, this.add_service, () => this.add_service.serialize(writer));
            if (this.has_remove_service)
                writer.writeMessage(4, this.remove_service, () => this.remove_service.serialize(writer));
            if (this.has_update_service)
                writer.writeMessage(5, this.update_service, () => this.update_service.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDIDAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDIDAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.add_key, () => message.add_key = AddKeyAction.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.remove_key, () => message.remove_key = RemoveKeyAction.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.add_service, () => message.add_service = AddServiceAction.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.remove_service, () => message.remove_service = RemoveServiceAction.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.update_service, () => message.update_service = UpdateServiceAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDIDAction {
            return UpdateDIDAction.deserialize(bytes);
        }
    }
    export class UpdateDIDOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            previous_operation_hash?: Uint8Array;
            id?: string;
            actions?: UpdateDIDAction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("previous_operation_hash" in data && data.previous_operation_hash != undefined) {
                    this.previous_operation_hash = data.previous_operation_hash;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
            }
        }
        get previous_operation_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set previous_operation_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get actions() {
            return pb_1.Message.getRepeatedWrapperField(this, UpdateDIDAction, 3) as UpdateDIDAction[];
        }
        set actions(value: UpdateDIDAction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            previous_operation_hash?: Uint8Array;
            id?: string;
            actions?: ReturnType<typeof UpdateDIDAction.prototype.toObject>[];
        }): UpdateDIDOperation {
            const message = new UpdateDIDOperation({});
            if (data.previous_operation_hash != null) {
                message.previous_operation_hash = data.previous_operation_hash;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.actions != null) {
                message.actions = data.actions.map(item => UpdateDIDAction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                previous_operation_hash?: Uint8Array;
                id?: string;
                actions?: ReturnType<typeof UpdateDIDAction.prototype.toObject>[];
            } = {};
            if (this.previous_operation_hash != null) {
                data.previous_operation_hash = this.previous_operation_hash;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.actions != null) {
                data.actions = this.actions.map((item: UpdateDIDAction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.previous_operation_hash.length)
                writer.writeBytes(1, this.previous_operation_hash);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (this.actions.length)
                writer.writeRepeatedMessage(3, this.actions, (item: UpdateDIDAction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDIDOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDIDOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.previous_operation_hash = reader.readBytes();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UpdateDIDAction.deserialize(reader), UpdateDIDAction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDIDOperation {
            return UpdateDIDOperation.deserialize(bytes);
        }
    }
    export class CredentialBatchData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            issuer_did?: string;
            merkle_root?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("issuer_did" in data && data.issuer_did != undefined) {
                    this.issuer_did = data.issuer_did;
                }
                if ("merkle_root" in data && data.merkle_root != undefined) {
                    this.merkle_root = data.merkle_root;
                }
            }
        }
        get issuer_did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set issuer_did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get merkle_root() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set merkle_root(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            issuer_did?: string;
            merkle_root?: Uint8Array;
        }): CredentialBatchData {
            const message = new CredentialBatchData({});
            if (data.issuer_did != null) {
                message.issuer_did = data.issuer_did;
            }
            if (data.merkle_root != null) {
                message.merkle_root = data.merkle_root;
            }
            return message;
        }
        toObject() {
            const data: {
                issuer_did?: string;
                merkle_root?: Uint8Array;
            } = {};
            if (this.issuer_did != null) {
                data.issuer_did = this.issuer_did;
            }
            if (this.merkle_root != null) {
                data.merkle_root = this.merkle_root;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.issuer_did.length)
                writer.writeString(1, this.issuer_did);
            if (this.merkle_root.length)
                writer.writeBytes(2, this.merkle_root);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CredentialBatchData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialBatchData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.issuer_did = reader.readString();
                        break;
                    case 2:
                        message.merkle_root = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CredentialBatchData {
            return CredentialBatchData.deserialize(bytes);
        }
    }
    export class IssueCredentialBatchOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_batch_data?: CredentialBatchData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_batch_data" in data && data.credential_batch_data != undefined) {
                    this.credential_batch_data = data.credential_batch_data;
                }
            }
        }
        get credential_batch_data() {
            return pb_1.Message.getWrapperField(this, CredentialBatchData, 1) as CredentialBatchData;
        }
        set credential_batch_data(value: CredentialBatchData) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential_batch_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            credential_batch_data?: ReturnType<typeof CredentialBatchData.prototype.toObject>;
        }): IssueCredentialBatchOperation {
            const message = new IssueCredentialBatchOperation({});
            if (data.credential_batch_data != null) {
                message.credential_batch_data = CredentialBatchData.fromObject(data.credential_batch_data);
            }
            return message;
        }
        toObject() {
            const data: {
                credential_batch_data?: ReturnType<typeof CredentialBatchData.prototype.toObject>;
            } = {};
            if (this.credential_batch_data != null) {
                data.credential_batch_data = this.credential_batch_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential_batch_data)
                writer.writeMessage(1, this.credential_batch_data, () => this.credential_batch_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueCredentialBatchOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueCredentialBatchOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential_batch_data, () => message.credential_batch_data = CredentialBatchData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueCredentialBatchOperation {
            return IssueCredentialBatchOperation.deserialize(bytes);
        }
    }
    export class RevokeCredentialsOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            previous_operation_hash?: Uint8Array;
            credential_batch_id?: string;
            credentials_to_revoke?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("previous_operation_hash" in data && data.previous_operation_hash != undefined) {
                    this.previous_operation_hash = data.previous_operation_hash;
                }
                if ("credential_batch_id" in data && data.credential_batch_id != undefined) {
                    this.credential_batch_id = data.credential_batch_id;
                }
                if ("credentials_to_revoke" in data && data.credentials_to_revoke != undefined) {
                    this.credentials_to_revoke = data.credentials_to_revoke;
                }
            }
        }
        get previous_operation_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set previous_operation_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_batch_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get credentials_to_revoke() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set credentials_to_revoke(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            previous_operation_hash?: Uint8Array;
            credential_batch_id?: string;
            credentials_to_revoke?: Uint8Array[];
        }): RevokeCredentialsOperation {
            const message = new RevokeCredentialsOperation({});
            if (data.previous_operation_hash != null) {
                message.previous_operation_hash = data.previous_operation_hash;
            }
            if (data.credential_batch_id != null) {
                message.credential_batch_id = data.credential_batch_id;
            }
            if (data.credentials_to_revoke != null) {
                message.credentials_to_revoke = data.credentials_to_revoke;
            }
            return message;
        }
        toObject() {
            const data: {
                previous_operation_hash?: Uint8Array;
                credential_batch_id?: string;
                credentials_to_revoke?: Uint8Array[];
            } = {};
            if (this.previous_operation_hash != null) {
                data.previous_operation_hash = this.previous_operation_hash;
            }
            if (this.credential_batch_id != null) {
                data.credential_batch_id = this.credential_batch_id;
            }
            if (this.credentials_to_revoke != null) {
                data.credentials_to_revoke = this.credentials_to_revoke;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.previous_operation_hash.length)
                writer.writeBytes(1, this.previous_operation_hash);
            if (this.credential_batch_id.length)
                writer.writeString(2, this.credential_batch_id);
            if (this.credentials_to_revoke.length)
                writer.writeRepeatedBytes(3, this.credentials_to_revoke);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeCredentialsOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeCredentialsOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.previous_operation_hash = reader.readBytes();
                        break;
                    case 2:
                        message.credential_batch_id = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeCredentialsOperation {
            return RevokeCredentialsOperation.deserialize(bytes);
        }
    }
    export class ProtocolVersionUpdateOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposer_did?: string;
            version?: ProtocolVersionInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposer_did" in data && data.proposer_did != undefined) {
                    this.proposer_did = data.proposer_did;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get proposer_did() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set proposer_did(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getWrapperField(this, ProtocolVersionInfo, 2) as ProtocolVersionInfo;
        }
        set version(value: ProtocolVersionInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            proposer_did?: string;
            version?: ReturnType<typeof ProtocolVersionInfo.prototype.toObject>;
        }): ProtocolVersionUpdateOperation {
            const message = new ProtocolVersionUpdateOperation({});
            if (data.proposer_did != null) {
                message.proposer_did = data.proposer_did;
            }
            if (data.version != null) {
                message.version = ProtocolVersionInfo.fromObject(data.version);
            }
            return message;
        }
        toObject() {
            const data: {
                proposer_did?: string;
                version?: ReturnType<typeof ProtocolVersionInfo.prototype.toObject>;
            } = {};
            if (this.proposer_did != null) {
                data.proposer_did = this.proposer_did;
            }
            if (this.version != null) {
                data.version = this.version.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposer_did.length)
                writer.writeString(1, this.proposer_did);
            if (this.has_version)
                writer.writeMessage(2, this.version, () => this.version.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolVersionUpdateOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersionUpdateOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposer_did = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.version, () => message.version = ProtocolVersionInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolVersionUpdateOperation {
            return ProtocolVersionUpdateOperation.deserialize(bytes);
        }
    }
    export class ProtocolVersion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            major_version?: number;
            minor_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("minor_version" in data && data.minor_version != undefined) {
                    this.minor_version = data.minor_version;
                }
            }
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set major_version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get minor_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set minor_version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            major_version?: number;
            minor_version?: number;
        }): ProtocolVersion {
            const message = new ProtocolVersion({});
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.minor_version != null) {
                message.minor_version = data.minor_version;
            }
            return message;
        }
        toObject() {
            const data: {
                major_version?: number;
                minor_version?: number;
            } = {};
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.minor_version != null) {
                data.minor_version = this.minor_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.major_version != 0)
                writer.writeInt32(1, this.major_version);
            if (this.minor_version != 0)
                writer.writeInt32(2, this.minor_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolVersion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.major_version = reader.readInt32();
                        break;
                    case 2:
                        message.minor_version = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolVersion {
            return ProtocolVersion.deserialize(bytes);
        }
    }
    export class ProtocolVersionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_name?: string;
            effective_since?: number;
            protocol_version?: ProtocolVersion;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_name" in data && data.version_name != undefined) {
                    this.version_name = data.version_name;
                }
                if ("effective_since" in data && data.effective_since != undefined) {
                    this.effective_since = data.effective_since;
                }
                if ("protocol_version" in data && data.protocol_version != undefined) {
                    this.protocol_version = data.protocol_version;
                }
            }
        }
        get version_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get effective_since() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set effective_since(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get protocol_version() {
            return pb_1.Message.getWrapperField(this, ProtocolVersion, 5) as ProtocolVersion;
        }
        set protocol_version(value: ProtocolVersion) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_protocol_version() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            version_name?: string;
            effective_since?: number;
            protocol_version?: ReturnType<typeof ProtocolVersion.prototype.toObject>;
        }): ProtocolVersionInfo {
            const message = new ProtocolVersionInfo({});
            if (data.version_name != null) {
                message.version_name = data.version_name;
            }
            if (data.effective_since != null) {
                message.effective_since = data.effective_since;
            }
            if (data.protocol_version != null) {
                message.protocol_version = ProtocolVersion.fromObject(data.protocol_version);
            }
            return message;
        }
        toObject() {
            const data: {
                version_name?: string;
                effective_since?: number;
                protocol_version?: ReturnType<typeof ProtocolVersion.prototype.toObject>;
            } = {};
            if (this.version_name != null) {
                data.version_name = this.version_name;
            }
            if (this.effective_since != null) {
                data.effective_since = this.effective_since;
            }
            if (this.protocol_version != null) {
                data.protocol_version = this.protocol_version.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_name.length)
                writer.writeString(1, this.version_name);
            if (this.effective_since != 0)
                writer.writeInt32(4, this.effective_since);
            if (this.has_protocol_version)
                writer.writeMessage(5, this.protocol_version, () => this.protocol_version.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolVersionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_name = reader.readString();
                        break;
                    case 4:
                        message.effective_since = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.protocol_version, () => message.protocol_version = ProtocolVersion.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolVersionInfo {
            return ProtocolVersionInfo.deserialize(bytes);
        }
    }
    export class DeactivateDIDOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            previous_operation_hash?: Uint8Array;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("previous_operation_hash" in data && data.previous_operation_hash != undefined) {
                    this.previous_operation_hash = data.previous_operation_hash;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get previous_operation_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set previous_operation_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            previous_operation_hash?: Uint8Array;
            id?: string;
        }): DeactivateDIDOperation {
            const message = new DeactivateDIDOperation({});
            if (data.previous_operation_hash != null) {
                message.previous_operation_hash = data.previous_operation_hash;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                previous_operation_hash?: Uint8Array;
                id?: string;
            } = {};
            if (this.previous_operation_hash != null) {
                data.previous_operation_hash = this.previous_operation_hash;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.previous_operation_hash.length)
                writer.writeBytes(1, this.previous_operation_hash);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeactivateDIDOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateDIDOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.previous_operation_hash = reader.readBytes();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeactivateDIDOperation {
            return DeactivateDIDOperation.deserialize(bytes);
        }
    }
    export class AtalaOperation extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            create_did?: CreateDIDOperation;
            update_did?: never;
            issue_credential_batch?: never;
            revoke_credentials?: never;
            protocol_version_update?: never;
            deactivate_did?: never;
        } | {
            create_did?: never;
            update_did?: UpdateDIDOperation;
            issue_credential_batch?: never;
            revoke_credentials?: never;
            protocol_version_update?: never;
            deactivate_did?: never;
        } | {
            create_did?: never;
            update_did?: never;
            issue_credential_batch?: IssueCredentialBatchOperation;
            revoke_credentials?: never;
            protocol_version_update?: never;
            deactivate_did?: never;
        } | {
            create_did?: never;
            update_did?: never;
            issue_credential_batch?: never;
            revoke_credentials?: RevokeCredentialsOperation;
            protocol_version_update?: never;
            deactivate_did?: never;
        } | {
            create_did?: never;
            update_did?: never;
            issue_credential_batch?: never;
            revoke_credentials?: never;
            protocol_version_update?: ProtocolVersionUpdateOperation;
            deactivate_did?: never;
        } | {
            create_did?: never;
            update_did?: never;
            issue_credential_batch?: never;
            revoke_credentials?: never;
            protocol_version_update?: never;
            deactivate_did?: DeactivateDIDOperation;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("create_did" in data && data.create_did != undefined) {
                    this.create_did = data.create_did;
                }
                if ("update_did" in data && data.update_did != undefined) {
                    this.update_did = data.update_did;
                }
                if ("issue_credential_batch" in data && data.issue_credential_batch != undefined) {
                    this.issue_credential_batch = data.issue_credential_batch;
                }
                if ("revoke_credentials" in data && data.revoke_credentials != undefined) {
                    this.revoke_credentials = data.revoke_credentials;
                }
                if ("protocol_version_update" in data && data.protocol_version_update != undefined) {
                    this.protocol_version_update = data.protocol_version_update;
                }
                if ("deactivate_did" in data && data.deactivate_did != undefined) {
                    this.deactivate_did = data.deactivate_did;
                }
            }
        }
        get create_did() {
            return pb_1.Message.getWrapperField(this, CreateDIDOperation, 1) as CreateDIDOperation;
        }
        set create_did(value: CreateDIDOperation) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_create_did() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get update_did() {
            return pb_1.Message.getWrapperField(this, UpdateDIDOperation, 2) as UpdateDIDOperation;
        }
        set update_did(value: UpdateDIDOperation) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_update_did() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get issue_credential_batch() {
            return pb_1.Message.getWrapperField(this, IssueCredentialBatchOperation, 3) as IssueCredentialBatchOperation;
        }
        set issue_credential_batch(value: IssueCredentialBatchOperation) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_issue_credential_batch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get revoke_credentials() {
            return pb_1.Message.getWrapperField(this, RevokeCredentialsOperation, 4) as RevokeCredentialsOperation;
        }
        set revoke_credentials(value: RevokeCredentialsOperation) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_revoke_credentials() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get protocol_version_update() {
            return pb_1.Message.getWrapperField(this, ProtocolVersionUpdateOperation, 5) as ProtocolVersionUpdateOperation;
        }
        set protocol_version_update(value: ProtocolVersionUpdateOperation) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_protocol_version_update() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get deactivate_did() {
            return pb_1.Message.getWrapperField(this, DeactivateDIDOperation, 6) as DeactivateDIDOperation;
        }
        set deactivate_did(value: DeactivateDIDOperation) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_deactivate_did() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get operation() {
            const cases: {
                [index: number]: "none" | "create_did" | "update_did" | "issue_credential_batch" | "revoke_credentials" | "protocol_version_update" | "deactivate_did";
            } = {
                0: "none",
                1: "create_did",
                2: "update_did",
                3: "issue_credential_batch",
                4: "revoke_credentials",
                5: "protocol_version_update",
                6: "deactivate_did"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            create_did?: ReturnType<typeof CreateDIDOperation.prototype.toObject>;
            update_did?: ReturnType<typeof UpdateDIDOperation.prototype.toObject>;
            issue_credential_batch?: ReturnType<typeof IssueCredentialBatchOperation.prototype.toObject>;
            revoke_credentials?: ReturnType<typeof RevokeCredentialsOperation.prototype.toObject>;
            protocol_version_update?: ReturnType<typeof ProtocolVersionUpdateOperation.prototype.toObject>;
            deactivate_did?: ReturnType<typeof DeactivateDIDOperation.prototype.toObject>;
        }): AtalaOperation {
            const message = new AtalaOperation({});
            if (data.create_did != null) {
                message.create_did = CreateDIDOperation.fromObject(data.create_did);
            }
            if (data.update_did != null) {
                message.update_did = UpdateDIDOperation.fromObject(data.update_did);
            }
            if (data.issue_credential_batch != null) {
                message.issue_credential_batch = IssueCredentialBatchOperation.fromObject(data.issue_credential_batch);
            }
            if (data.revoke_credentials != null) {
                message.revoke_credentials = RevokeCredentialsOperation.fromObject(data.revoke_credentials);
            }
            if (data.protocol_version_update != null) {
                message.protocol_version_update = ProtocolVersionUpdateOperation.fromObject(data.protocol_version_update);
            }
            if (data.deactivate_did != null) {
                message.deactivate_did = DeactivateDIDOperation.fromObject(data.deactivate_did);
            }
            return message;
        }
        toObject() {
            const data: {
                create_did?: ReturnType<typeof CreateDIDOperation.prototype.toObject>;
                update_did?: ReturnType<typeof UpdateDIDOperation.prototype.toObject>;
                issue_credential_batch?: ReturnType<typeof IssueCredentialBatchOperation.prototype.toObject>;
                revoke_credentials?: ReturnType<typeof RevokeCredentialsOperation.prototype.toObject>;
                protocol_version_update?: ReturnType<typeof ProtocolVersionUpdateOperation.prototype.toObject>;
                deactivate_did?: ReturnType<typeof DeactivateDIDOperation.prototype.toObject>;
            } = {};
            if (this.create_did != null) {
                data.create_did = this.create_did.toObject();
            }
            if (this.update_did != null) {
                data.update_did = this.update_did.toObject();
            }
            if (this.issue_credential_batch != null) {
                data.issue_credential_batch = this.issue_credential_batch.toObject();
            }
            if (this.revoke_credentials != null) {
                data.revoke_credentials = this.revoke_credentials.toObject();
            }
            if (this.protocol_version_update != null) {
                data.protocol_version_update = this.protocol_version_update.toObject();
            }
            if (this.deactivate_did != null) {
                data.deactivate_did = this.deactivate_did.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_create_did)
                writer.writeMessage(1, this.create_did, () => this.create_did.serialize(writer));
            if (this.has_update_did)
                writer.writeMessage(2, this.update_did, () => this.update_did.serialize(writer));
            if (this.has_issue_credential_batch)
                writer.writeMessage(3, this.issue_credential_batch, () => this.issue_credential_batch.serialize(writer));
            if (this.has_revoke_credentials)
                writer.writeMessage(4, this.revoke_credentials, () => this.revoke_credentials.serialize(writer));
            if (this.has_protocol_version_update)
                writer.writeMessage(5, this.protocol_version_update, () => this.protocol_version_update.serialize(writer));
            if (this.has_deactivate_did)
                writer.writeMessage(6, this.deactivate_did, () => this.deactivate_did.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AtalaOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AtalaOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.create_did, () => message.create_did = CreateDIDOperation.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.update_did, () => message.update_did = UpdateDIDOperation.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.issue_credential_batch, () => message.issue_credential_batch = IssueCredentialBatchOperation.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.revoke_credentials, () => message.revoke_credentials = RevokeCredentialsOperation.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.protocol_version_update, () => message.protocol_version_update = ProtocolVersionUpdateOperation.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.deactivate_did, () => message.deactivate_did = DeactivateDIDOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AtalaOperation {
            return AtalaOperation.deserialize(bytes);
        }
    }
    export class SignedAtalaOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signed_with?: string;
            signature?: Uint8Array;
            operation?: AtalaOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signed_with" in data && data.signed_with != undefined) {
                    this.signed_with = data.signed_with;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get signed_with() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set signed_with(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, AtalaOperation, 3) as AtalaOperation;
        }
        set operation(value: AtalaOperation) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            signed_with?: string;
            signature?: Uint8Array;
            operation?: ReturnType<typeof AtalaOperation.prototype.toObject>;
        }): SignedAtalaOperation {
            const message = new SignedAtalaOperation({});
            if (data.signed_with != null) {
                message.signed_with = data.signed_with;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.operation != null) {
                message.operation = AtalaOperation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                signed_with?: string;
                signature?: Uint8Array;
                operation?: ReturnType<typeof AtalaOperation.prototype.toObject>;
            } = {};
            if (this.signed_with != null) {
                data.signed_with = this.signed_with;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signed_with.length)
                writer.writeString(1, this.signed_with);
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (this.has_operation)
                writer.writeMessage(3, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignedAtalaOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedAtalaOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signed_with = reader.readString();
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.operation, () => message.operation = AtalaOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignedAtalaOperation {
            return SignedAtalaOperation.deserialize(bytes);
        }
    }
    export class LedgerData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction_id?: string;
            ledger?: dependency_1.io.iohk.atala.prism.protos.Ledger;
            timestamp_info?: TimestampInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("ledger" in data && data.ledger != undefined) {
                    this.ledger = data.ledger;
                }
                if ("timestamp_info" in data && data.timestamp_info != undefined) {
                    this.timestamp_info = data.timestamp_info;
                }
            }
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ledger() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.io.iohk.atala.prism.protos.Ledger.UNKNOWN_LEDGER) as dependency_1.io.iohk.atala.prism.protos.Ledger;
        }
        set ledger(value: dependency_1.io.iohk.atala.prism.protos.Ledger) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp_info() {
            return pb_1.Message.getWrapperField(this, TimestampInfo, 3) as TimestampInfo;
        }
        set timestamp_info(value: TimestampInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_timestamp_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            transaction_id?: string;
            ledger?: dependency_1.io.iohk.atala.prism.protos.Ledger;
            timestamp_info?: ReturnType<typeof TimestampInfo.prototype.toObject>;
        }): LedgerData {
            const message = new LedgerData({});
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.ledger != null) {
                message.ledger = data.ledger;
            }
            if (data.timestamp_info != null) {
                message.timestamp_info = TimestampInfo.fromObject(data.timestamp_info);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction_id?: string;
                ledger?: dependency_1.io.iohk.atala.prism.protos.Ledger;
                timestamp_info?: ReturnType<typeof TimestampInfo.prototype.toObject>;
            } = {};
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.ledger != null) {
                data.ledger = this.ledger;
            }
            if (this.timestamp_info != null) {
                data.timestamp_info = this.timestamp_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction_id.length)
                writer.writeString(1, this.transaction_id);
            if (this.ledger != dependency_1.io.iohk.atala.prism.protos.Ledger.UNKNOWN_LEDGER)
                writer.writeEnum(2, this.ledger);
            if (this.has_timestamp_info)
                writer.writeMessage(3, this.timestamp_info, () => this.timestamp_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LedgerData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LedgerData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transaction_id = reader.readString();
                        break;
                    case 2:
                        message.ledger = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.timestamp_info, () => message.timestamp_info = TimestampInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LedgerData {
            return LedgerData.deserialize(bytes);
        }
    }
    export class OperationOutput extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 7, 8], [5, 6]];
        constructor(data?: any[] | ({} & (({
            batch_output?: IssueCredentialBatchOutput;
            create_did_output?: never;
            update_did_output?: never;
            revoke_credentials_output?: never;
            protocol_version_update_output?: never;
            deactivate_did_output?: never;
        } | {
            batch_output?: never;
            create_did_output?: CreateDIDOutput;
            update_did_output?: never;
            revoke_credentials_output?: never;
            protocol_version_update_output?: never;
            deactivate_did_output?: never;
        } | {
            batch_output?: never;
            create_did_output?: never;
            update_did_output?: UpdateDIDOutput;
            revoke_credentials_output?: never;
            protocol_version_update_output?: never;
            deactivate_did_output?: never;
        } | {
            batch_output?: never;
            create_did_output?: never;
            update_did_output?: never;
            revoke_credentials_output?: RevokeCredentialsOutput;
            protocol_version_update_output?: never;
            deactivate_did_output?: never;
        } | {
            batch_output?: never;
            create_did_output?: never;
            update_did_output?: never;
            revoke_credentials_output?: never;
            protocol_version_update_output?: ProtocolVersionUpdateOutput;
            deactivate_did_output?: never;
        } | {
            batch_output?: never;
            create_did_output?: never;
            update_did_output?: never;
            revoke_credentials_output?: never;
            protocol_version_update_output?: never;
            deactivate_did_output?: DeactivateDIDOutput;
        }) | ({
            operation_id?: Uint8Array;
            error?: never;
        } | {
            operation_id?: never;
            error?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_output" in data && data.batch_output != undefined) {
                    this.batch_output = data.batch_output;
                }
                if ("create_did_output" in data && data.create_did_output != undefined) {
                    this.create_did_output = data.create_did_output;
                }
                if ("update_did_output" in data && data.update_did_output != undefined) {
                    this.update_did_output = data.update_did_output;
                }
                if ("revoke_credentials_output" in data && data.revoke_credentials_output != undefined) {
                    this.revoke_credentials_output = data.revoke_credentials_output;
                }
                if ("protocol_version_update_output" in data && data.protocol_version_update_output != undefined) {
                    this.protocol_version_update_output = data.protocol_version_update_output;
                }
                if ("deactivate_did_output" in data && data.deactivate_did_output != undefined) {
                    this.deactivate_did_output = data.deactivate_did_output;
                }
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get batch_output() {
            return pb_1.Message.getWrapperField(this, IssueCredentialBatchOutput, 1) as IssueCredentialBatchOutput;
        }
        set batch_output(value: IssueCredentialBatchOutput) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_batch_output() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get create_did_output() {
            return pb_1.Message.getWrapperField(this, CreateDIDOutput, 2) as CreateDIDOutput;
        }
        set create_did_output(value: CreateDIDOutput) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_create_did_output() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get update_did_output() {
            return pb_1.Message.getWrapperField(this, UpdateDIDOutput, 3) as UpdateDIDOutput;
        }
        set update_did_output(value: UpdateDIDOutput) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_update_did_output() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get revoke_credentials_output() {
            return pb_1.Message.getWrapperField(this, RevokeCredentialsOutput, 4) as RevokeCredentialsOutput;
        }
        set revoke_credentials_output(value: RevokeCredentialsOutput) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_revoke_credentials_output() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get protocol_version_update_output() {
            return pb_1.Message.getWrapperField(this, ProtocolVersionUpdateOutput, 7) as ProtocolVersionUpdateOutput;
        }
        set protocol_version_update_output(value: ProtocolVersionUpdateOutput) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_protocol_version_update_output() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get deactivate_did_output() {
            return pb_1.Message.getWrapperField(this, DeactivateDIDOutput, 8) as DeactivateDIDOutput;
        }
        set deactivate_did_output(value: DeactivateDIDOutput) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_deactivate_did_output() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
        }
        set operation_id(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_operation_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "batch_output" | "create_did_output" | "update_did_output" | "revoke_credentials_output" | "protocol_version_update_output" | "deactivate_did_output";
            } = {
                0: "none",
                1: "batch_output",
                2: "create_did_output",
                3: "update_did_output",
                4: "revoke_credentials_output",
                7: "protocol_version_update_output",
                8: "deactivate_did_output"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 7, 8])];
        }
        get operation_maybe() {
            const cases: {
                [index: number]: "none" | "operation_id" | "error";
            } = {
                0: "none",
                5: "operation_id",
                6: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
        }
        static fromObject(data: {
            batch_output?: ReturnType<typeof IssueCredentialBatchOutput.prototype.toObject>;
            create_did_output?: ReturnType<typeof CreateDIDOutput.prototype.toObject>;
            update_did_output?: ReturnType<typeof UpdateDIDOutput.prototype.toObject>;
            revoke_credentials_output?: ReturnType<typeof RevokeCredentialsOutput.prototype.toObject>;
            protocol_version_update_output?: ReturnType<typeof ProtocolVersionUpdateOutput.prototype.toObject>;
            deactivate_did_output?: ReturnType<typeof DeactivateDIDOutput.prototype.toObject>;
            operation_id?: Uint8Array;
            error?: string;
        }): OperationOutput {
            const message = new OperationOutput({});
            if (data.batch_output != null) {
                message.batch_output = IssueCredentialBatchOutput.fromObject(data.batch_output);
            }
            if (data.create_did_output != null) {
                message.create_did_output = CreateDIDOutput.fromObject(data.create_did_output);
            }
            if (data.update_did_output != null) {
                message.update_did_output = UpdateDIDOutput.fromObject(data.update_did_output);
            }
            if (data.revoke_credentials_output != null) {
                message.revoke_credentials_output = RevokeCredentialsOutput.fromObject(data.revoke_credentials_output);
            }
            if (data.protocol_version_update_output != null) {
                message.protocol_version_update_output = ProtocolVersionUpdateOutput.fromObject(data.protocol_version_update_output);
            }
            if (data.deactivate_did_output != null) {
                message.deactivate_did_output = DeactivateDIDOutput.fromObject(data.deactivate_did_output);
            }
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_output?: ReturnType<typeof IssueCredentialBatchOutput.prototype.toObject>;
                create_did_output?: ReturnType<typeof CreateDIDOutput.prototype.toObject>;
                update_did_output?: ReturnType<typeof UpdateDIDOutput.prototype.toObject>;
                revoke_credentials_output?: ReturnType<typeof RevokeCredentialsOutput.prototype.toObject>;
                protocol_version_update_output?: ReturnType<typeof ProtocolVersionUpdateOutput.prototype.toObject>;
                deactivate_did_output?: ReturnType<typeof DeactivateDIDOutput.prototype.toObject>;
                operation_id?: Uint8Array;
                error?: string;
            } = {};
            if (this.batch_output != null) {
                data.batch_output = this.batch_output.toObject();
            }
            if (this.create_did_output != null) {
                data.create_did_output = this.create_did_output.toObject();
            }
            if (this.update_did_output != null) {
                data.update_did_output = this.update_did_output.toObject();
            }
            if (this.revoke_credentials_output != null) {
                data.revoke_credentials_output = this.revoke_credentials_output.toObject();
            }
            if (this.protocol_version_update_output != null) {
                data.protocol_version_update_output = this.protocol_version_update_output.toObject();
            }
            if (this.deactivate_did_output != null) {
                data.deactivate_did_output = this.deactivate_did_output.toObject();
            }
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch_output)
                writer.writeMessage(1, this.batch_output, () => this.batch_output.serialize(writer));
            if (this.has_create_did_output)
                writer.writeMessage(2, this.create_did_output, () => this.create_did_output.serialize(writer));
            if (this.has_update_did_output)
                writer.writeMessage(3, this.update_did_output, () => this.update_did_output.serialize(writer));
            if (this.has_revoke_credentials_output)
                writer.writeMessage(4, this.revoke_credentials_output, () => this.revoke_credentials_output.serialize(writer));
            if (this.has_protocol_version_update_output)
                writer.writeMessage(7, this.protocol_version_update_output, () => this.protocol_version_update_output.serialize(writer));
            if (this.has_deactivate_did_output)
                writer.writeMessage(8, this.deactivate_did_output, () => this.deactivate_did_output.serialize(writer));
            if (this.has_operation_id)
                writer.writeBytes(5, this.operation_id);
            if (this.has_error)
                writer.writeString(6, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch_output, () => message.batch_output = IssueCredentialBatchOutput.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.create_did_output, () => message.create_did_output = CreateDIDOutput.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.update_did_output, () => message.update_did_output = UpdateDIDOutput.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.revoke_credentials_output, () => message.revoke_credentials_output = RevokeCredentialsOutput.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.protocol_version_update_output, () => message.protocol_version_update_output = ProtocolVersionUpdateOutput.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.deactivate_did_output, () => message.deactivate_did_output = DeactivateDIDOutput.deserialize(reader));
                        break;
                    case 5:
                        message.operation_id = reader.readBytes();
                        break;
                    case 6:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperationOutput {
            return OperationOutput.deserialize(bytes);
        }
    }
    export class IssueCredentialBatchOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set batch_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            batch_id?: string;
        }): IssueCredentialBatchOutput {
            const message = new IssueCredentialBatchOutput({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: string;
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id.length)
                writer.writeString(1, this.batch_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueCredentialBatchOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueCredentialBatchOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueCredentialBatchOutput {
            return IssueCredentialBatchOutput.deserialize(bytes);
        }
    }
    export class CreateDIDOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            did_suffix?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("did_suffix" in data && data.did_suffix != undefined) {
                    this.did_suffix = data.did_suffix;
                }
            }
        }
        get did_suffix() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set did_suffix(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            did_suffix?: string;
        }): CreateDIDOutput {
            const message = new CreateDIDOutput({});
            if (data.did_suffix != null) {
                message.did_suffix = data.did_suffix;
            }
            return message;
        }
        toObject() {
            const data: {
                did_suffix?: string;
            } = {};
            if (this.did_suffix != null) {
                data.did_suffix = this.did_suffix;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.did_suffix.length)
                writer.writeString(1, this.did_suffix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDIDOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDIDOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.did_suffix = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateDIDOutput {
            return CreateDIDOutput.deserialize(bytes);
        }
    }
    export class UpdateDIDOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateDIDOutput {
            const message = new UpdateDIDOutput({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDIDOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDIDOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDIDOutput {
            return UpdateDIDOutput.deserialize(bytes);
        }
    }
    export class RevokeCredentialsOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RevokeCredentialsOutput {
            const message = new RevokeCredentialsOutput({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeCredentialsOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeCredentialsOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeCredentialsOutput {
            return RevokeCredentialsOutput.deserialize(bytes);
        }
    }
    export class ProtocolVersionUpdateOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ProtocolVersionUpdateOutput {
            const message = new ProtocolVersionUpdateOutput({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolVersionUpdateOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolVersionUpdateOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolVersionUpdateOutput {
            return ProtocolVersionUpdateOutput.deserialize(bytes);
        }
    }
    export class DeactivateDIDOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeactivateDIDOutput {
            const message = new DeactivateDIDOutput({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeactivateDIDOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeactivateDIDOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeactivateDIDOutput {
            return DeactivateDIDOutput.deserialize(bytes);
        }
    }
    export class Service extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            type?: string;
            service_endpoint?: string[];
            added_on?: LedgerData;
            deleted_on?: LedgerData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("service_endpoint" in data && data.service_endpoint != undefined) {
                    this.service_endpoint = data.service_endpoint;
                }
                if ("added_on" in data && data.added_on != undefined) {
                    this.added_on = data.added_on;
                }
                if ("deleted_on" in data && data.deleted_on != undefined) {
                    this.deleted_on = data.deleted_on;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service_endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set service_endpoint(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get added_on() {
            return pb_1.Message.getWrapperField(this, LedgerData, 4) as LedgerData;
        }
        set added_on(value: LedgerData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_added_on() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get deleted_on() {
            return pb_1.Message.getWrapperField(this, LedgerData, 5) as LedgerData;
        }
        set deleted_on(value: LedgerData) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_deleted_on() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: string;
            type?: string;
            service_endpoint?: string[];
            added_on?: ReturnType<typeof LedgerData.prototype.toObject>;
            deleted_on?: ReturnType<typeof LedgerData.prototype.toObject>;
        }): Service {
            const message = new Service({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.service_endpoint != null) {
                message.service_endpoint = data.service_endpoint;
            }
            if (data.added_on != null) {
                message.added_on = LedgerData.fromObject(data.added_on);
            }
            if (data.deleted_on != null) {
                message.deleted_on = LedgerData.fromObject(data.deleted_on);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                type?: string;
                service_endpoint?: string[];
                added_on?: ReturnType<typeof LedgerData.prototype.toObject>;
                deleted_on?: ReturnType<typeof LedgerData.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.service_endpoint != null) {
                data.service_endpoint = this.service_endpoint;
            }
            if (this.added_on != null) {
                data.added_on = this.added_on.toObject();
            }
            if (this.deleted_on != null) {
                data.deleted_on = this.deleted_on.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.service_endpoint.length)
                writer.writeRepeatedString(3, this.service_endpoint);
            if (this.has_added_on)
                writer.writeMessage(4, this.added_on, () => this.added_on.serialize(writer));
            if (this.has_deleted_on)
                writer.writeMessage(5, this.deleted_on, () => this.deleted_on.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Service {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Service();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.added_on, () => message.added_on = LedgerData.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.deleted_on, () => message.deleted_on = LedgerData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Service {
            return Service.deserialize(bytes);
        }
    }
}
