/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: common_models.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp.js";
import * as pb_1 from "google-protobuf";
export namespace io.iohk.atala.prism.protos {
    export enum SortByDirection {
        SORT_BY_DIRECTION_UNKNOWN = 0,
        SORT_BY_DIRECTION_ASCENDING = 1,
        SORT_BY_DIRECTION_DESCENDING = 2
    }
    export enum Ledger {
        UNKNOWN_LEDGER = 0,
        IN_MEMORY = 1,
        CARDANO_TESTNET = 4,
        CARDANO_MAINNET = 5
    }
    export enum OperationStatus {
        UNKNOWN_OPERATION = 0,
        PENDING_SUBMISSION = 1,
        AWAIT_CONFIRMATION = 2,
        CONFIRMED_AND_APPLIED = 3,
        CONFIRMED_AND_REJECTED = 4
    }
    export class HealthCheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): HealthCheckRequest {
            const message = new HealthCheckRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthCheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthCheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthCheckRequest {
            return HealthCheckRequest.deserialize(bytes);
        }
    }
    export class HealthCheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): HealthCheckResponse {
            const message = new HealthCheckResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthCheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthCheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthCheckResponse {
            return HealthCheckResponse.deserialize(bytes);
        }
    }
    export class Date extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            year?: number;
            month?: number;
            day?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("year" in data && data.year != undefined) {
                    this.year = data.year;
                }
                if ("month" in data && data.month != undefined) {
                    this.month = data.month;
                }
                if ("day" in data && data.day != undefined) {
                    this.day = data.day;
                }
            }
        }
        get year() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set year(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get month() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set month(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get day() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set day(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            year?: number;
            month?: number;
            day?: number;
        }): Date {
            const message = new Date({});
            if (data.year != null) {
                message.year = data.year;
            }
            if (data.month != null) {
                message.month = data.month;
            }
            if (data.day != null) {
                message.day = data.day;
            }
            return message;
        }
        toObject() {
            const data: {
                year?: number;
                month?: number;
                day?: number;
            } = {};
            if (this.year != null) {
                data.year = this.year;
            }
            if (this.month != null) {
                data.month = this.month;
            }
            if (this.day != null) {
                data.day = this.day;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.year != 0)
                writer.writeInt32(1, this.year);
            if (this.month != 0)
                writer.writeInt32(2, this.month);
            if (this.day != 0)
                writer.writeInt32(3, this.day);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Date {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Date();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.year = reader.readInt32();
                        break;
                    case 2:
                        message.month = reader.readInt32();
                        break;
                    case 3:
                        message.day = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Date {
            return Date.deserialize(bytes);
        }
    }
    export class TimeInterval extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_timestamp?: dependency_1.google.protobuf.Timestamp;
            end_timestamp?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_timestamp" in data && data.start_timestamp != undefined) {
                    this.start_timestamp = data.start_timestamp;
                }
                if ("end_timestamp" in data && data.end_timestamp != undefined) {
                    this.end_timestamp = data.end_timestamp;
                }
            }
        }
        get start_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set start_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set end_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            start_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            end_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): TimeInterval {
            const message = new TimeInterval({});
            if (data.start_timestamp != null) {
                message.start_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.start_timestamp);
            }
            if (data.end_timestamp != null) {
                message.end_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.end_timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                start_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                end_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.start_timestamp != null) {
                data.start_timestamp = this.start_timestamp.toObject();
            }
            if (this.end_timestamp != null) {
                data.end_timestamp = this.end_timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_timestamp)
                writer.writeMessage(1, this.start_timestamp, () => this.start_timestamp.serialize(writer));
            if (this.has_end_timestamp)
                writer.writeMessage(2, this.end_timestamp, () => this.end_timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeInterval {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeInterval();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_timestamp, () => message.start_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_timestamp, () => message.end_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeInterval {
            return TimeInterval.deserialize(bytes);
        }
    }
    export class BlockInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            number?: number;
            index?: number;
            timestamp?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            number?: number;
            index?: number;
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): BlockInfo {
            const message = new BlockInfo({});
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                number?: number;
                index?: number;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.number != 0)
                writer.writeInt32(1, this.number);
            if (this.index != 0)
                writer.writeInt32(3, this.index);
            if (this.has_timestamp)
                writer.writeMessage(4, this.timestamp, () => this.timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.number = reader.readInt32();
                        break;
                    case 3:
                        message.index = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockInfo {
            return BlockInfo.deserialize(bytes);
        }
    }
    export class TransactionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction_id?: string;
            ledger?: Ledger;
            block?: BlockInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("ledger" in data && data.ledger != undefined) {
                    this.ledger = data.ledger;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ledger() {
            return pb_1.Message.getFieldWithDefault(this, 2, Ledger.UNKNOWN_LEDGER) as Ledger;
        }
        set ledger(value: Ledger) {
            pb_1.Message.setField(this, 2, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, BlockInfo, 3) as BlockInfo;
        }
        set block(value: BlockInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            transaction_id?: string;
            ledger?: Ledger;
            block?: ReturnType<typeof BlockInfo.prototype.toObject>;
        }): TransactionInfo {
            const message = new TransactionInfo({});
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.ledger != null) {
                message.ledger = data.ledger;
            }
            if (data.block != null) {
                message.block = BlockInfo.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                transaction_id?: string;
                ledger?: Ledger;
                block?: ReturnType<typeof BlockInfo.prototype.toObject>;
            } = {};
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.ledger != null) {
                data.ledger = this.ledger;
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction_id.length)
                writer.writeString(1, this.transaction_id);
            if (this.ledger != Ledger.UNKNOWN_LEDGER)
                writer.writeEnum(2, this.ledger);
            if (this.has_block)
                writer.writeMessage(3, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transaction_id = reader.readString();
                        break;
                    case 2:
                        message.ledger = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.block, () => message.block = BlockInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionInfo {
            return TransactionInfo.deserialize(bytes);
        }
    }
}
